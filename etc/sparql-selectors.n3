#Processed by Id: cwm.py,v 1.197 2007-12-13 15:38:39 syosi Exp 
        #    using base file:///Users/gregg/Projects/swap/sparql/
        
#  Notation3 generation by
#       notation3.py,v 1.200 2007-12-11 21:18:08 syosi Exp

#   Base was: file:///Users/gregg/Projects/swap/sparql/
     @prefix : <http://www.w3.org/2000/10/swap/grammar/sparql#> .
    @prefix cfg: <http://www.w3.org/2000/10/swap/grammar/bnf#> .
    @prefix rul: <http://www.w3.org/2000/10/swap/grammar/bnf-rules#> .
    
    "!"     cfg:canPrecede :PrimaryExpression;
         cfg:canStartWith "!";
         cfg:condition "!" .
    
    "!="     cfg:canPrecede :NumericExpression;
         cfg:canStartWith "!=";
         cfg:condition "!=" .
    
    "&&"     cfg:canPrecede :ValueLogical;
         cfg:canStartWith "&&";
         cfg:condition "&&" .
    
    "("     cfg:canPrecede :Expression,
                :Var,
                :_Expression_COMMA_Expression_Star,
                :_GraphNode_Plus;
         cfg:canStartWith "(";
         cfg:condition "(" .
    
    ")"     cfg:canPrecede ")",
                ",",
                "]",
                "}",
                cfg:eof,
                :PropertyList,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_DOT_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LimitOffsetClauses_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_OrderCondition_Plus,
                :_SEMI_Verb_ObjectList_Opt_Star,
                :_TriplesBlock_Opt .
    
    "*"     cfg:canPrecede :SolutionModifier,
                :UnaryExpression,
                :WhereClause,
                :_DatasetClause_Star,
                :_WhereClause_Opt;
         cfg:canStartWith "*";
         cfg:condition "*" .
    
    "+"     cfg:canPrecede :MultiplicativeExpression,
                :NumericLiteralUnsigned,
                :PrimaryExpression;
         cfg:canStartWith "+";
         cfg:condition "+" .
    
    ","     cfg:canPrecede :Expression,
                :Object;
         cfg:canStartWith ",";
         cfg:condition "," .
    
    "-"     cfg:canPrecede :MultiplicativeExpression,
                :NumericLiteralUnsigned,
                :PrimaryExpression;
         cfg:canStartWith "-";
         cfg:condition "-" .
    
    "."     cfg:canPrecede "}",
                :_ConstructTriples_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_TriplesBlock_Opt;
         cfg:canStartWith ".";
         cfg:condition "." .
    
    "/"     cfg:canPrecede :UnaryExpression;
         cfg:canStartWith "/";
         cfg:condition "/" .
    
    ";"     cfg:canPrecede "]",
                "}",
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star,
                :_Verb_ObjectList_Opt;
         cfg:canStartWith ";";
         cfg:condition ";" .
    
    "<"     cfg:canPrecede :NumericExpression;
         cfg:canStartWith "<";
         cfg:condition "<" .
    
    "<="     cfg:canPrecede :NumericExpression;
         cfg:canStartWith "<=";
         cfg:condition "<=" .
    
    "="     cfg:canPrecede :NumericExpression;
         cfg:canStartWith "=";
         cfg:condition "=" .
    
    ">="     cfg:canPrecede :NumericExpression;
         cfg:canStartWith ">=";
         cfg:condition ">=" .
    
    ">"     cfg:canPrecede :NumericExpression;
         cfg:canStartWith ">";
         cfg:condition ">" .
    
    "ASC"     cfg:canPrecede :BrackettedExpression;
         cfg:canStartWith "ASC";
         cfg:condition "ASC" .
    
    "ASK"     cfg:canPrecede :SolutionModifier,
                :WhereClause,
                :_DatasetClause_Star,
                :_WhereClause_Opt;
         cfg:canStartWith "ASK";
         cfg:condition "ASK" .
    
    "BASE"     cfg:canPrecede :IRI_REF;
         cfg:canStartWith "BASE";
         cfg:condition "BASE" .
    
    "BOUND"     cfg:canPrecede "(";
         cfg:canStartWith "BOUND";
         cfg:condition "BOUND" .
    
    "BY"     cfg:canPrecede :OrderCondition .
    
    "CONSTRUCT"     cfg:canPrecede :ConstructTemplate;
         cfg:canStartWith "CONSTRUCT";
         cfg:condition "CONSTRUCT" .
    
    "DATATYPE"     cfg:canPrecede "(";
         cfg:canStartWith "DATATYPE";
         cfg:condition "DATATYPE" .
    
    "DESC"     cfg:canPrecede :BrackettedExpression;
         cfg:canStartWith "DESC";
         cfg:condition "DESC" .
    
    "DESCRIBE"     cfg:canPrecede :_VarOrIRIref_Plus_or_Star;
         cfg:canStartWith "DESCRIBE";
         cfg:condition "DESCRIBE" .
    
    "DISTINCT"     cfg:canPrecede :_Var_Plus_or_Star;
         cfg:canStartWith "DISTINCT";
         cfg:condition "DISTINCT" .
    
    "FILTER"     cfg:canPrecede :Constraint;
         cfg:canStartWith "FILTER";
         cfg:condition "FILTER" .
    
    "FROM"     cfg:canPrecede :_DefaultGraphClause_or_NamedGraphClause;
         cfg:canStartWith "FROM";
         cfg:condition "FROM" .
    
    "GRAPH"     cfg:canPrecede :VarOrIRIref;
         cfg:canStartWith "GRAPH";
         cfg:condition "GRAPH" .
    
    "LANG"     cfg:canPrecede "(";
         cfg:canStartWith "LANG";
         cfg:condition "LANG" .
    
    "LANGMATCHES"     cfg:canPrecede "(";
         cfg:canStartWith "LANGMATCHES";
         cfg:condition "LANGMATCHES" .
    
    "LIMIT"     cfg:canPrecede :INTEGER;
         cfg:canStartWith "LIMIT";
         cfg:condition "LIMIT" .
    
    "NAMED"     cfg:canPrecede :SourceSelector;
         cfg:canStartWith "NAMED";
         cfg:condition "NAMED" .
    
    "OFFSET"     cfg:canPrecede :INTEGER;
         cfg:canStartWith "OFFSET";
         cfg:condition "OFFSET" .
    
    "OPTIONAL"     cfg:canPrecede :GroupGraphPattern;
         cfg:canStartWith "OPTIONAL";
         cfg:condition "OPTIONAL" .
    
    "ORDER"     cfg:canPrecede "BY";
         cfg:canStartWith "ORDER";
         cfg:condition "ORDER" .
    
    "PREFIX"     cfg:canPrecede :PNAME_NS;
         cfg:canStartWith "PREFIX";
         cfg:condition "PREFIX" .
    
    "REDUCED"     cfg:canPrecede :_Var_Plus_or_Star;
         cfg:canStartWith "REDUCED";
         cfg:condition "REDUCED" .
    
    "REGEX"     cfg:canPrecede "(";
         cfg:canStartWith "REGEX";
         cfg:condition "REGEX" .
    
    "SELECT"     cfg:canPrecede :_DISTINCT_OR_REDUCED_Opt,
                :_Var_Plus_or_Star;
         cfg:canStartWith "SELECT";
         cfg:condition "SELECT" .
    
    "STR"     cfg:canPrecede "(";
         cfg:canStartWith "STR";
         cfg:condition "STR" .
    
    "UNION"     cfg:canPrecede :GroupGraphPattern;
         cfg:canStartWith "UNION";
         cfg:condition "UNION" .
    
    "WHERE"     cfg:canPrecede :GroupGraphPattern;
         cfg:canStartWith "WHERE";
         cfg:condition "WHERE" .
    
    "["     cfg:canPrecede :PropertyListNotEmpty;
         cfg:canStartWith "[";
         cfg:condition "[" .
    
    "]"     cfg:canPrecede ")",
                "]",
                "}",
                :PropertyList,
                :_COMMA_Object_Star,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star .
    
    "^^"     cfg:canPrecede :IRIref;
         cfg:canStartWith "^^";
         cfg:condition "^^" .
    
    "a"     cfg:canPrecede :ObjectList;
         cfg:canStartWith "a";
         cfg:condition "a" .
    
    "isBLANK"     cfg:canPrecede "(";
         cfg:canStartWith "isBLANK";
         cfg:condition "isBLANK" .
    
    "isIRI"     cfg:canPrecede "(";
         cfg:canStartWith "isIRI";
         cfg:condition "isIRI" .
    
    "isLITERAL"     cfg:canPrecede "(";
         cfg:canStartWith "isLITERAL";
         cfg:condition "isLITERAL" .
    
    "isURI"     cfg:canPrecede "(";
         cfg:canStartWith "isURI";
         cfg:condition "isURI" .
    
    "sameTerm"     cfg:canPrecede "(";
         cfg:canStartWith "sameTerm";
         cfg:condition "sameTerm" .
    
    "{"     cfg:canPrecede "}",
                :_ConstructTriples_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_TriplesBlock_Opt;
         cfg:canStartWith "{";
         cfg:condition "{" .
    
    "||"     cfg:canPrecede :ConditionalAndExpression;
         cfg:canStartWith "||";
         cfg:condition "||" .
    
    "}"     cfg:canPrecede "}",
                cfg:eof,
                :SolutionModifier,
                :WhereClause,
                :_DOT_Opt,
                :_DatasetClause_Star,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_TriplesBlock_Opt,
                :_UNION_GroupGraphPattern_Star,
                :_WhereClause_Opt .
    
    ()     a rul:Used .
      ( "!"
        :PrimaryExpression )
         a rul:Used .
      ( "!="
        :NumericExpression )
         a rul:Used .
      ( "&&"
        :ValueLogical )
         a rul:Used .
      ( "("
        :Expression
        ")" )
         a rul:Used .
      ( "("
        :_Expression_COMMA_Expression_Star
        ")" )
         a rul:Used .
      ( "("
        :_GraphNode_Plus
        ")" )
         a rul:Used .
      ( "*"
        :UnaryExpression
        :_Mul_Div_UnaryExpression_Star )
         a rul:Used .
      ( "*" )
         a rul:Used .
      ( "+"
        :MultiplicativeExpression
        :_Add_Sub_MultiplicativeExpression_Star )
         a rul:Used .
      ( "+"
        :NumericLiteralUnsigned )
         a rul:Used .
      ( "+"
        :PrimaryExpression )
         a rul:Used .
      ( ","
        :Expression )
         a rul:Used .
      ( ","
        :Object )
         a rul:Used .
      ( "-"
        :MultiplicativeExpression
        :_Add_Sub_MultiplicativeExpression_Star )
         a rul:Used .
      ( "-"
        :NumericLiteralUnsigned )
         a rul:Used .
      ( "-"
        :PrimaryExpression )
         a rul:Used .
      ( "."
        :_ConstructTriples_Opt )
         a rul:Used .
      ( "."
        :_TriplesBlock_Opt )
         a rul:Used .
      ( "." )
         a rul:Used .
      ( "/"
        :UnaryExpression
        :_Mul_Div_UnaryExpression_Star )
         a rul:Used .
      ( ";"
        :_Verb_ObjectList_Opt )
         a rul:Used .
      ( "<"
        :NumericExpression )
         a rul:Used .
      ( "<="
        :NumericExpression )
         a rul:Used .
      ( "="
        :NumericExpression )
         a rul:Used .
      ( ">="
        :NumericExpression )
         a rul:Used .
      ( ">"
        :NumericExpression )
         a rul:Used .
      ( "ASC" )
         a rul:Used .
      ( "ASK"
        :_DatasetClause_Star
        :WhereClause )
         a rul:Used .
      ( "BASE"
        :IRI_REF )
         a rul:Used .
      ( "BOUND"
        "("
        :Var
        ")" )
         a rul:Used .
      ( "CONSTRUCT"
        :ConstructTemplate
        :_DatasetClause_Star
        :WhereClause
        :SolutionModifier )
         a rul:Used .
      ( "DATATYPE"
        "("
        :Expression
        ")" )
         a rul:Used .
      ( "DESC" )
         a rul:Used .
      ( "DESCRIBE"
        :_VarOrIRIref_Plus_or_Star
        :_DatasetClause_Star
        :_WhereClause_Opt
        :SolutionModifier )
         a rul:Used .
      ( "DISTINCT" )
         a rul:Used .
      ( "FILTER"
        :Constraint )
         a rul:Used .
      ( "FROM"
        :_DefaultGraphClause_or_NamedGraphClause )
         a rul:Used .
      ( "GRAPH"
        :VarOrIRIref
        :GroupGraphPattern )
         a rul:Used .
      ( "LANG"
        "("
        :Expression
        ")" )
         a rul:Used .
      ( "LANGMATCHES"
        "("
        :Expression
        ","
        :Expression
        ")" )
         a rul:Used .
      ( "LIMIT"
        :INTEGER )
         a rul:Used .
      ( "NAMED"
        :SourceSelector )
         a rul:Used .
      ( "OFFSET"
        :INTEGER )
         a rul:Used .
      ( "OPTIONAL"
        :GroupGraphPattern )
         a rul:Used .
      ( "ORDER"
        "BY"
        :OrderCondition
        :_OrderCondition_Plus )
         a rul:Used .
      ( "PREFIX"
        :PNAME_NS
        :IRI_REF )
         a rul:Used .
      ( "REDUCED" )
         a rul:Used .
      ( "REGEX"
        "("
        :Expression
        ","
        :Expression
        :_COMMA_Expression_Opt
        ")" )
         a rul:Used .
      ( "SELECT"
        :_DISTINCT_OR_REDUCED_Opt
        :_Var_Plus_or_Star
        :_DatasetClause_Star
        :WhereClause
        :SolutionModifier )
         a rul:Used .
      ( "STR"
        "("
        :Expression
        ")" )
         a rul:Used .
      ( "UNION"
        :GroupGraphPattern )
         a rul:Used .
      ( "WHERE" )
         a rul:Used .
      ( "["
        :PropertyListNotEmpty
        "]" )
         a rul:Used .
      ( "^^"
        :IRIref )
         a rul:Used .
      ( "a" )
         a rul:Used .
      ( "isBLANK"
        "("
        :Expression
        ")" )
         a rul:Used .
      ( "isIRI"
        "("
        :Expression
        ")" )
         a rul:Used .
      ( "isLITERAL"
        "("
        :Expression
        ")" )
         a rul:Used .
      ( "isURI"
        "("
        :Expression
        ")" )
         a rul:Used .
      ( "sameTerm"
        "("
        :Expression
        ","
        :Expression
        ")" )
         a rul:Used .
      ( "{"
        :_ConstructTriples_Opt
        "}" )
         a rul:Used .
      ( "{"
        :_TriplesBlock_Opt
        :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star
        "}" )
         a rul:Used .
      ( "||"
        :ConditionalAndExpression )
         a rul:Used .
      ( :ANON )
         a rul:Used .
      ( :AdditiveExpression )
         a rul:Used .
      ( :ArgList )
         a rul:Used .
      ( :AskQuery )
         a rul:Used .
      ( :BLANK_NODE_LABEL )
         a rul:Used .
      ( :BaseDecl )
         a rul:Used .
      ( :BlankNode )
         a rul:Used .
      ( :BlankNodePropertyList )
         a rul:Used .
      ( :BooleanLiteral )
         a rul:Used .
      ( :BrackettedExpression )
         a rul:Used .
      ( :BuiltInCall )
         a rul:Used .
      ( :Collection )
         a rul:Used .
      ( :ConditionalAndExpression
        :_OR_ConditionalAndExpression_Star )
         a rul:Used .
      ( :ConditionalOrExpression )
         a rul:Used .
      ( :Constraint )
         a rul:Used .
      ( :ConstructQuery )
         a rul:Used .
      ( :ConstructTriples )
         a rul:Used .
      ( :DECIMAL )
         a rul:Used .
      ( :DOUBLE )
         a rul:Used .
      ( :DatasetClause
        :_DatasetClause_Star )
         a rul:Used .
      ( :DefaultGraphClause )
         a rul:Used .
      ( :DescribeQuery )
         a rul:Used .
      ( :Expression
        :_COMMA_Expression_Star )
         a rul:Used .
      ( :Filter )
         a rul:Used .
      ( :FunctionCall )
         a rul:Used .
      ( :GraphGraphPattern )
         a rul:Used .
      ( :GraphNode
        :_GraphNode_Opt )
         a rul:Used .
      ( :GraphNode )
         a rul:Used .
      ( :GraphPatternNotTriples )
         a rul:Used .
      ( :GraphTerm )
         a rul:Used .
      ( :GroupGraphPattern
        :_UNION_GroupGraphPattern_Star )
         a rul:Used .
      ( :GroupOrUnionGraphPattern )
         a rul:Used .
      ( :INTEGER )
         a rul:Used .
      ( :IRI_REF )
         a rul:Used .
      ( :IRIref
        :ArgList )
         a rul:Used .
      ( :IRIref
        :_ArgList_Opt )
         a rul:Used .
      ( :IRIref )
         a rul:Used .
      ( :IRIrefOrFunction )
         a rul:Used .
      ( :LANGTAG )
         a rul:Used .
      ( :LimitClause
        :_OffsetClause_Opt )
         a rul:Used .
      ( :LimitClause )
         a rul:Used .
      ( :LimitOffsetClauses )
         a rul:Used .
      ( :MultiplicativeExpression
        :_Add_Sub_MultiplicativeExpression_Star )
         a rul:Used .
      ( :NIL )
         a rul:Used .
      ( :NamedGraphClause )
         a rul:Used .
      ( :NumericExpression
        :_Compare_NumericExpression_Opt )
         a rul:Used .
      ( :NumericLiteral )
         a rul:Used .
      ( :NumericLiteralNegative )
         a rul:Used .
      ( :NumericLiteralPositive )
         a rul:Used .
      ( :NumericLiteralUnsigned )
         a rul:Used .
      ( :Object
        :_COMMA_Object_Star )
         a rul:Used .
      ( :OffsetClause
        :_LimitClause_Opt )
         a rul:Used .
      ( :OffsetClause )
         a rul:Used .
      ( :OptionalGraphPattern )
         a rul:Used .
      ( :OrderClause )
         a rul:Used .
      ( :OrderCondition
        :_OrderCondition_Plus )
         a rul:Used .
      ( :PNAME_LN )
         a rul:Used .
      ( :PNAME_NS )
         a rul:Used .
      ( :PrefixDecl
        :_PrefixDecl_Star )
         a rul:Used .
      ( :PrefixedName )
         a rul:Used .
      ( :PrimaryExpression )
         a rul:Used .
      ( :Prologue
        :_SelectQuery_or_ConstructQuery_or_DescribeQuery_or_AskQuery
        cfg:eof )
         a rul:Used .
      ( :PropertyListNotEmpty )
         a rul:Used .
      ( :RDFLiteral )
         a rul:Used .
      ( :RegexExpression )
         a rul:Used .
      ( :RelationalExpression )
         a rul:Used .
      ( :STRING_LITERAL1 )
         a rul:Used .
      ( :STRING_LITERAL2 )
         a rul:Used .
      ( :STRING_LITERAL_LONG1 )
         a rul:Used .
      ( :STRING_LITERAL_LONG2 )
         a rul:Used .
      ( :SelectQuery )
         a rul:Used .
      ( :SourceSelector )
         a rul:Used .
      ( :String
        :_LANGTAG_IRIref_Opt )
         a rul:Used .
      ( :TriplesBlock )
         a rul:Used .
      ( :TriplesNode
        :PropertyList )
         a rul:Used .
      ( :TriplesNode )
         a rul:Used .
      ( :TriplesSameSubject
        :_DOT_ConstructTriples_Opt_Opt )
         a rul:Used .
      ( :TriplesSameSubject
        :_Dot_TriplesBlock_Opt_Opt )
         a rul:Used .
      ( :UnaryExpression
        :_Mul_Div_UnaryExpression_Star )
         a rul:Used .
      ( :VAR1 )
         a rul:Used .
      ( :VAR2 )
         a rul:Used .
      ( :ValueLogical
        :_AND_ValueLogical_Star )
         a rul:Used .
      ( :Var
        :_Var_Plus )
         a rul:Used .
      ( :Var )
         a rul:Used .
      ( :VarOrIRIref
        :_VarOrIRIRef_Plus )
         a rul:Used .
      ( :VarOrIRIref )
         a rul:Used .
      ( :VarOrTerm
        :PropertyListNotEmpty )
         a rul:Used .
      ( :VarOrTerm )
         a rul:Used .
      ( :Verb
        :ObjectList
        :_SEMI_Verb_ObjectList_Opt_Star )
         a rul:Used .
      ( :Verb
        :ObjectList )
         a rul:Used .
      ( :WhereClause )
         a rul:Used .
      ( :_AND_ValueLogical
        :_AND_ValueLogical_Star )
         a rul:Used .
      ( :_ASC_Or_DESC
        :BrackettedExpression )
         a rul:Used .
      ( :_ASC_Or_DESC_BrackettedExpression )
         a rul:Used .
      ( :_BaseDecl_Opt
        :_PrefixDecl_Star )
         a rul:Used .
      ( :_COMMA_Object
        :_COMMA_Object_Star )
         a rul:Used .
      ( :_Constraint_or_Var )
         a rul:Used .
      ( :_GraphPatternNotTriples_or_Filter
        :_DOT_Opt
        :_TriplesBlock_Opt )
         a rul:Used .
      ( :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt
        :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star )
         a rul:Used .
      ( :_OR_ConditionalAndExpression
        :_OR_ConditionalAndExpression_Star )
         a rul:Used .
      ( :_OrderClause_Opt
        :_LimitOffsetClauses_Opt )
         a rul:Used .
      ( :_SEMI_Verb_ObjectList_Opt
        :_SEMI_Verb_ObjectList_Opt_Star )
         a rul:Used .
      ( :_UNION_GroupGraphPattern
        :_UNION_GroupGraphPattern_Star )
         a rul:Used .
      ( :_WHERE_Opt
        :GroupGraphPattern )
         a rul:Used .
    
    cfg:eof     a cfg:Token .
    
    :ANON     a cfg:Token;
         cfg:canPrecede ")",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_COMMA_Object_Star,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith :ANON;
         cfg:condition :ANON .
    
    :AdditiveExpression     cfg:TEST :MultiplicativeExpression;
         cfg:branch  [
             cfg:branchTail  (
            :MultiplicativeExpression
            :_Add_Sub_MultiplicativeExpression_Star );
             cfg:condition "!",
                    "(",
                    "+",
                    "-",
                    "BOUND",
                    "DATATYPE",
                    "LANG",
                    "LANGMATCHES",
                    "REGEX",
                    "STR",
                    "isBLANK",
                    "isIRI",
                    "isLITERAL",
                    "isURI",
                    "sameTerm",
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :MultiplicativeExpression
            :_Add_Sub_MultiplicativeExpression_Star ) ];
         cfg:canPrecede ")",
                ",",
                :_AND_ValueLogical_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_Compare_NumericExpression_Opt,
                :_OR_ConditionalAndExpression_Star;
         cfg:canStartWith "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :MultiplicativeExpression
            :_Add_Sub_MultiplicativeExpression_Star ) ) .
    
    :ArgList     cfg:TEST "(",
                :NIL;
         cfg:branch  [
             cfg:branchTail  (
            :NIL );
             cfg:condition :NIL;
             cfg:sequence  (
            :NIL ) ],
                 [
             cfg:branchTail  (
            "("
            :_Expression_COMMA_Expression_Star
            ")" );
             cfg:condition "(";
             cfg:sequence  (
            "("
            :_Expression_COMMA_Expression_Star
            ")" ) ];
         cfg:canPrecede ")",
                ",",
                "}",
                cfg:eof,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LimitOffsetClauses_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_OrderCondition_Plus,
                :_TriplesBlock_Opt;
         cfg:canStartWith "(",
                :NIL;
         cfg:canStartWithLiteral "(";
         cfg:condition "(",
                :NIL;
         cfg:mustBeOneSequence  (
         (
            :NIL )
         (
            "("
            :_Expression_COMMA_Expression_Star
            ")" ) ) .
    
    :AskQuery     cfg:TEST "ASK";
         cfg:branch  [
             cfg:branchTail  (
            "ASK"
            :_DatasetClause_Star
            :WhereClause );
             cfg:condition "ASK";
             cfg:sequence  (
            "ASK"
            :_DatasetClause_Star
            :WhereClause ) ];
         cfg:canPrecede cfg:eof;
         cfg:canStartWith "ASK";
         cfg:canStartWithLiteral "ASK";
         cfg:condition "ASK";
         cfg:mustBeOneSequence  (
         (
            "ASK"
            :_DatasetClause_Star
            :WhereClause ) ) .
    
    :BLANK_NODE_LABEL     a cfg:Token;
         cfg:canPrecede ")",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_COMMA_Object_Star,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith :BLANK_NODE_LABEL;
         cfg:condition :BLANK_NODE_LABEL .
    
    :BaseDecl     cfg:TEST "BASE";
         cfg:branch  [
             cfg:branchTail  (
            "BASE"
            :IRI_REF );
             cfg:condition "BASE";
             cfg:sequence  (
            "BASE"
            :IRI_REF ) ];
         cfg:canPrecede :_PrefixDecl_Star,
                :_SelectQuery_or_ConstructQuery_or_DescribeQuery_or_AskQuery;
         cfg:canStartWith "BASE";
         cfg:canStartWithLiteral "BASE";
         cfg:condition "BASE";
         cfg:mustBeOneSequence  (
         (
            "BASE"
            :IRI_REF ) ) .
    
    :BlankNode     cfg:TEST :ANON,
                :BLANK_NODE_LABEL;
         cfg:branch  [
             cfg:branchTail  (
            :BLANK_NODE_LABEL );
             cfg:condition :BLANK_NODE_LABEL;
             cfg:sequence  (
            :BLANK_NODE_LABEL ) ],
                 [
             cfg:branchTail  (
            :ANON );
             cfg:condition :ANON;
             cfg:sequence  (
            :ANON ) ];
         cfg:canPrecede ")",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_COMMA_Object_Star,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith :ANON,
                :BLANK_NODE_LABEL;
         cfg:condition :ANON,
                :BLANK_NODE_LABEL;
         cfg:mustBeOneSequence  (
         (
            :BLANK_NODE_LABEL )
         (
            :ANON ) ) .
    
    :BlankNodePropertyList     cfg:TEST "[";
         cfg:branch  [
             cfg:branchTail  (
            "["
            :PropertyListNotEmpty
            "]" );
             cfg:condition "[";
             cfg:sequence  (
            "["
            :PropertyListNotEmpty
            "]" ) ];
         cfg:canPrecede ")",
                "]",
                "}",
                :PropertyList,
                :_COMMA_Object_Star,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith "[";
         cfg:canStartWithLiteral "[";
         cfg:condition "[";
         cfg:mustBeOneSequence  (
         (
            "["
            :PropertyListNotEmpty
            "]" ) ) .
    
    :BooleanLiteral     a cfg:Token;
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith :BooleanLiteral;
         cfg:condition :BooleanLiteral .
    
    :BrackettedExpression     cfg:TEST "(";
         cfg:branch  [
             cfg:branchTail  (
            "("
            :Expression
            ")" );
             cfg:condition "(";
             cfg:sequence  (
            "("
            :Expression
            ")" ) ];
         cfg:canPrecede ")",
                ",",
                "}",
                cfg:eof,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LimitOffsetClauses_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_OrderCondition_Plus,
                :_TriplesBlock_Opt;
         cfg:canStartWith "(";
         cfg:canStartWithLiteral "(";
         cfg:condition "(";
         cfg:mustBeOneSequence  (
         (
            "("
            :Expression
            ")" ) ) .
    
    :BuiltInCall     cfg:TEST "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :RegexExpression;
         cfg:branch  [
             cfg:branchTail  (
            "STR"
            "("
            :Expression
            ")" );
             cfg:condition "STR";
             cfg:sequence  (
            "STR"
            "("
            :Expression
            ")" ) ],
                 [
             cfg:branchTail  (
            "LANG"
            "("
            :Expression
            ")" );
             cfg:condition "LANG";
             cfg:sequence  (
            "LANG"
            "("
            :Expression
            ")" ) ],
                 [
             cfg:branchTail  (
            "LANGMATCHES"
            "("
            :Expression
            ","
            :Expression
            ")" );
             cfg:condition "LANGMATCHES";
             cfg:sequence  (
            "LANGMATCHES"
            "("
            :Expression
            ","
            :Expression
            ")" ) ],
                 [
             cfg:branchTail  (
            "DATATYPE"
            "("
            :Expression
            ")" );
             cfg:condition "DATATYPE";
             cfg:sequence  (
            "DATATYPE"
            "("
            :Expression
            ")" ) ],
                 [
             cfg:branchTail  (
            "BOUND"
            "("
            :Var
            ")" );
             cfg:condition "BOUND";
             cfg:sequence  (
            "BOUND"
            "("
            :Var
            ")" ) ],
                 [
             cfg:branchTail  (
            "sameTerm"
            "("
            :Expression
            ","
            :Expression
            ")" );
             cfg:condition "sameTerm";
             cfg:sequence  (
            "sameTerm"
            "("
            :Expression
            ","
            :Expression
            ")" ) ],
                 [
             cfg:branchTail  (
            "isIRI"
            "("
            :Expression
            ")" );
             cfg:condition "isIRI";
             cfg:sequence  (
            "isIRI"
            "("
            :Expression
            ")" ) ],
                 [
             cfg:branchTail  (
            "isURI"
            "("
            :Expression
            ")" );
             cfg:condition "isURI";
             cfg:sequence  (
            "isURI"
            "("
            :Expression
            ")" ) ],
                 [
             cfg:branchTail  (
            "isBLANK"
            "("
            :Expression
            ")" );
             cfg:condition "isBLANK";
             cfg:sequence  (
            "isBLANK"
            "("
            :Expression
            ")" ) ],
                 [
             cfg:branchTail  (
            "isLITERAL"
            "("
            :Expression
            ")" );
             cfg:condition "isLITERAL";
             cfg:sequence  (
            "isLITERAL"
            "("
            :Expression
            ")" ) ],
                 [
             cfg:branchTail  (
            :RegexExpression );
             cfg:condition "REGEX";
             cfg:sequence  (
            :RegexExpression ) ];
         cfg:canPrecede ")",
                ",",
                "}",
                cfg:eof,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LimitOffsetClauses_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_OrderCondition_Plus,
                :_TriplesBlock_Opt;
         cfg:canStartWith "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm";
         cfg:canStartWithLiteral "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm";
         cfg:condition "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm";
         cfg:mustBeOneSequence  (
         (
            "STR"
            "("
            :Expression
            ")" )
         (
            "LANG"
            "("
            :Expression
            ")" )
         (
            "LANGMATCHES"
            "("
            :Expression
            ","
            :Expression
            ")" )
         (
            "DATATYPE"
            "("
            :Expression
            ")" )
         (
            "BOUND"
            "("
            :Var
            ")" )
         (
            "sameTerm"
            "("
            :Expression
            ","
            :Expression
            ")" )
         (
            "isIRI"
            "("
            :Expression
            ")" )
         (
            "isURI"
            "("
            :Expression
            ")" )
         (
            "isBLANK"
            "("
            :Expression
            ")" )
         (
            "isLITERAL"
            "("
            :Expression
            ")" )
         (
            :RegexExpression ) ) .
    
    :Collection     cfg:TEST "(";
         cfg:branch  [
             cfg:branchTail  (
            "("
            :_GraphNode_Plus
            ")" );
             cfg:condition "(";
             cfg:sequence  (
            "("
            :_GraphNode_Plus
            ")" ) ];
         cfg:canPrecede ")",
                "]",
                "}",
                :PropertyList,
                :_COMMA_Object_Star,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith "(";
         cfg:canStartWithLiteral "(";
         cfg:condition "(";
         cfg:mustBeOneSequence  (
         (
            "("
            :_GraphNode_Plus
            ")" ) ) .
    
    :ConditionalAndExpression     cfg:TEST :ValueLogical;
         cfg:branch  [
             cfg:branchTail  (
            :ValueLogical
            :_AND_ValueLogical_Star );
             cfg:condition "!",
                    "(",
                    "+",
                    "-",
                    "BOUND",
                    "DATATYPE",
                    "LANG",
                    "LANGMATCHES",
                    "REGEX",
                    "STR",
                    "isBLANK",
                    "isIRI",
                    "isLITERAL",
                    "isURI",
                    "sameTerm",
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :ValueLogical
            :_AND_ValueLogical_Star ) ];
         cfg:canPrecede ")",
                ",",
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_OR_ConditionalAndExpression_Star;
         cfg:canStartWith "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :ValueLogical
            :_AND_ValueLogical_Star ) ) .
    
    :ConditionalOrExpression     cfg:TEST :ConditionalAndExpression;
         cfg:branch  [
             cfg:branchTail  (
            :ConditionalAndExpression
            :_OR_ConditionalAndExpression_Star );
             cfg:condition "!",
                    "(",
                    "+",
                    "-",
                    "BOUND",
                    "DATATYPE",
                    "LANG",
                    "LANGMATCHES",
                    "REGEX",
                    "STR",
                    "isBLANK",
                    "isIRI",
                    "isLITERAL",
                    "isURI",
                    "sameTerm",
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :ConditionalAndExpression
            :_OR_ConditionalAndExpression_Star ) ];
         cfg:canPrecede ")",
                ",",
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star;
         cfg:canStartWith "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :ConditionalAndExpression
            :_OR_ConditionalAndExpression_Star ) ) .
    
    :Constraint     cfg:TEST :BrackettedExpression,
                :BuiltInCall,
                :FunctionCall;
         cfg:branch  [
             cfg:branchTail  (
            :BrackettedExpression );
             cfg:condition "(";
             cfg:sequence  (
            :BrackettedExpression ) ],
                 [
             cfg:branchTail  (
            :BuiltInCall );
             cfg:condition "BOUND",
                    "DATATYPE",
                    "LANG",
                    "LANGMATCHES",
                    "REGEX",
                    "STR",
                    "isBLANK",
                    "isIRI",
                    "isLITERAL",
                    "isURI",
                    "sameTerm";
             cfg:sequence  (
            :BuiltInCall ) ],
                 [
             cfg:branchTail  (
            :FunctionCall );
             cfg:condition :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS;
             cfg:sequence  (
            :FunctionCall ) ];
         cfg:canPrecede "}",
                cfg:eof,
                :_DOT_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LimitOffsetClauses_Opt,
                :_OrderCondition_Plus,
                :_TriplesBlock_Opt;
         cfg:canStartWith "(",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS;
         cfg:condition "(",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS;
         cfg:mustBeOneSequence  (
         (
            :BrackettedExpression )
         (
            :BuiltInCall )
         (
            :FunctionCall ) ) .
    
    :ConstructQuery     cfg:TEST "CONSTRUCT";
         cfg:branch  [
             cfg:branchTail  (
            "CONSTRUCT"
            :ConstructTemplate
            :_DatasetClause_Star
            :WhereClause
            :SolutionModifier );
             cfg:condition "CONSTRUCT";
             cfg:sequence  (
            "CONSTRUCT"
            :ConstructTemplate
            :_DatasetClause_Star
            :WhereClause
            :SolutionModifier ) ];
         cfg:canPrecede cfg:eof;
         cfg:canStartWith "CONSTRUCT";
         cfg:canStartWithLiteral "CONSTRUCT";
         cfg:condition "CONSTRUCT";
         cfg:mustBeOneSequence  (
         (
            "CONSTRUCT"
            :ConstructTemplate
            :_DatasetClause_Star
            :WhereClause
            :SolutionModifier ) ) .
    
    :ConstructTemplate     cfg:TEST "{";
         cfg:branch  [
             cfg:branchTail  (
            "{"
            :_ConstructTriples_Opt
            "}" );
             cfg:condition "{";
             cfg:sequence  (
            "{"
            :_ConstructTriples_Opt
            "}" ) ];
         cfg:canPrecede :SolutionModifier,
                :WhereClause,
                :_DatasetClause_Star,
                :_WhereClause_Opt;
         cfg:canStartWith "{";
         cfg:canStartWithLiteral "{";
         cfg:condition "{";
         cfg:mustBeOneSequence  (
         (
            "{"
            :_ConstructTriples_Opt
            "}" ) ) .
    
    :ConstructTriples     cfg:TEST :TriplesSameSubject;
         cfg:branch  [
             cfg:branchTail  (
            :TriplesSameSubject
            :_DOT_ConstructTriples_Opt_Opt );
             cfg:condition "(",
                    "+",
                    "-",
                    "[",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :NIL,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :TriplesSameSubject
            :_DOT_ConstructTriples_Opt_Opt ) ];
         cfg:canPrecede "}";
         cfg:canStartWith "(",
                "+",
                "-",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "(",
                "+",
                "-",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :TriplesSameSubject
            :_DOT_ConstructTriples_Opt_Opt ) ) .
    
    :DECIMAL     a cfg:Token;
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith :DECIMAL;
         cfg:condition :DECIMAL .
    
    :DOUBLE     a cfg:Token;
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith :DOUBLE;
         cfg:condition :DOUBLE .
    
    :DatasetClause     cfg:TEST "FROM";
         cfg:branch  [
             cfg:branchTail  (
            "FROM"
            :_DefaultGraphClause_or_NamedGraphClause );
             cfg:condition "FROM";
             cfg:sequence  (
            "FROM"
            :_DefaultGraphClause_or_NamedGraphClause ) ];
         cfg:canPrecede :SolutionModifier,
                :WhereClause,
                :_DatasetClause_Star,
                :_WhereClause_Opt;
         cfg:canStartWith "FROM";
         cfg:canStartWithLiteral "FROM";
         cfg:condition "FROM";
         cfg:mustBeOneSequence  (
         (
            "FROM"
            :_DefaultGraphClause_or_NamedGraphClause ) ) .
    
    :DefaultGraphClause     cfg:TEST :SourceSelector;
         cfg:branch  [
             cfg:branchTail  (
            :SourceSelector );
             cfg:condition :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS;
             cfg:sequence  (
            :SourceSelector ) ];
         cfg:canPrecede :SolutionModifier,
                :WhereClause,
                :_DatasetClause_Star,
                :_WhereClause_Opt;
         cfg:canStartWith :IRI_REF,
                :PNAME_LN,
                :PNAME_NS;
         cfg:condition :IRI_REF,
                :PNAME_LN,
                :PNAME_NS;
         cfg:mustBeOneSequence  (
         (
            :SourceSelector ) ) .
    
    :DescribeQuery     cfg:TEST "DESCRIBE";
         cfg:branch  [
             cfg:branchTail  (
            "DESCRIBE"
            :_VarOrIRIref_Plus_or_Star
            :_DatasetClause_Star
            :_WhereClause_Opt
            :SolutionModifier );
             cfg:condition "DESCRIBE";
             cfg:sequence  (
            "DESCRIBE"
            :_VarOrIRIref_Plus_or_Star
            :_DatasetClause_Star
            :_WhereClause_Opt
            :SolutionModifier ) ];
         cfg:canPrecede cfg:eof;
         cfg:canStartWith "DESCRIBE";
         cfg:canStartWithLiteral "DESCRIBE";
         cfg:condition "DESCRIBE";
         cfg:mustBeOneSequence  (
         (
            "DESCRIBE"
            :_VarOrIRIref_Plus_or_Star
            :_DatasetClause_Star
            :_WhereClause_Opt
            :SolutionModifier ) ) .
    
    :ECHAR     a cfg:Token .
    
    :Expression     cfg:TEST :ConditionalOrExpression;
         cfg:branch  [
             cfg:branchTail  (
            :ConditionalOrExpression );
             cfg:condition "!",
                    "(",
                    "+",
                    "-",
                    "BOUND",
                    "DATATYPE",
                    "LANG",
                    "LANGMATCHES",
                    "REGEX",
                    "STR",
                    "isBLANK",
                    "isIRI",
                    "isLITERAL",
                    "isURI",
                    "sameTerm",
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :ConditionalOrExpression ) ];
         cfg:canPrecede ")",
                ",",
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star;
         cfg:canStartWith "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :ConditionalOrExpression ) ) .
    
    :Filter     cfg:TEST "FILTER";
         cfg:branch  [
             cfg:branchTail  (
            "FILTER"
            :Constraint );
             cfg:condition "FILTER";
             cfg:sequence  (
            "FILTER"
            :Constraint ) ];
         cfg:canPrecede "}",
                :_DOT_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_TriplesBlock_Opt;
         cfg:canStartWith "FILTER";
         cfg:canStartWithLiteral "FILTER";
         cfg:condition "FILTER";
         cfg:mustBeOneSequence  (
         (
            "FILTER"
            :Constraint ) ) .
    
    :FunctionCall     cfg:TEST :IRIref;
         cfg:branch  [
             cfg:branchTail  (
            :IRIref
            :ArgList );
             cfg:condition :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS;
             cfg:sequence  (
            :IRIref
            :ArgList ) ];
         cfg:canPrecede "}",
                cfg:eof,
                :_DOT_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LimitOffsetClauses_Opt,
                :_OrderCondition_Plus,
                :_TriplesBlock_Opt;
         cfg:canStartWith :IRI_REF,
                :PNAME_LN,
                :PNAME_NS;
         cfg:condition :IRI_REF,
                :PNAME_LN,
                :PNAME_NS;
         cfg:mustBeOneSequence  (
         (
            :IRIref
            :ArgList ) ) .
    
    :GraphGraphPattern     cfg:TEST "GRAPH";
         cfg:branch  [
             cfg:branchTail  (
            "GRAPH"
            :VarOrIRIref
            :GroupGraphPattern );
             cfg:condition "GRAPH";
             cfg:sequence  (
            "GRAPH"
            :VarOrIRIref
            :GroupGraphPattern ) ];
         cfg:canPrecede "}",
                :_DOT_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_TriplesBlock_Opt;
         cfg:canStartWith "GRAPH";
         cfg:canStartWithLiteral "GRAPH";
         cfg:condition "GRAPH";
         cfg:mustBeOneSequence  (
         (
            "GRAPH"
            :VarOrIRIref
            :GroupGraphPattern ) ) .
    
    :GraphNode     cfg:TEST :TriplesNode,
                :VarOrTerm;
         cfg:branch  [
             cfg:branchTail  (
            :VarOrTerm );
             cfg:condition "+",
                    "-",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :NIL,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :VarOrTerm ) ],
                 [
             cfg:branchTail  (
            :TriplesNode );
             cfg:condition "(",
                    "[";
             cfg:sequence  (
            :TriplesNode ) ];
         cfg:canPrecede ")",
                "]",
                "}",
                :_COMMA_Object_Star,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith "(",
                "+",
                "-",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "(",
                "+",
                "-",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :VarOrTerm )
         (
            :TriplesNode ) ) .
    
    :GraphPatternNotTriples     cfg:TEST :GraphGraphPattern,
                :GroupOrUnionGraphPattern,
                :OptionalGraphPattern;
         cfg:branch  [
             cfg:branchTail  (
            :OptionalGraphPattern );
             cfg:condition "OPTIONAL";
             cfg:sequence  (
            :OptionalGraphPattern ) ],
                 [
             cfg:branchTail  (
            :GroupOrUnionGraphPattern );
             cfg:condition "{";
             cfg:sequence  (
            :GroupOrUnionGraphPattern ) ],
                 [
             cfg:branchTail  (
            :GraphGraphPattern );
             cfg:condition "GRAPH";
             cfg:sequence  (
            :GraphGraphPattern ) ];
         cfg:canPrecede "}",
                :_DOT_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_TriplesBlock_Opt;
         cfg:canStartWith "GRAPH",
                "OPTIONAL",
                "{";
         cfg:condition "GRAPH",
                "OPTIONAL",
                "{";
         cfg:mustBeOneSequence  (
         (
            :OptionalGraphPattern )
         (
            :GroupOrUnionGraphPattern )
         (
            :GraphGraphPattern ) ) .
    
    :GraphTerm     cfg:TEST :BlankNode,
                :BooleanLiteral,
                :IRIref,
                :NIL,
                :NumericLiteral,
                :RDFLiteral;
         cfg:branch  [
             cfg:branchTail  (
            :IRIref );
             cfg:condition :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS;
             cfg:sequence  (
            :IRIref ) ],
                 [
             cfg:branchTail  (
            :RDFLiteral );
             cfg:condition :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2;
             cfg:sequence  (
            :RDFLiteral ) ],
                 [
             cfg:branchTail  (
            :NumericLiteral );
             cfg:condition "+",
                    "-",
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER;
             cfg:sequence  (
            :NumericLiteral ) ],
                 [
             cfg:branchTail  (
            :BooleanLiteral );
             cfg:condition :BooleanLiteral;
             cfg:sequence  (
            :BooleanLiteral ) ],
                 [
             cfg:branchTail  (
            :BlankNode );
             cfg:condition :ANON,
                    :BLANK_NODE_LABEL;
             cfg:sequence  (
            :BlankNode ) ],
                 [
             cfg:branchTail  (
            :NIL );
             cfg:condition :NIL;
             cfg:sequence  (
            :NIL ) ];
         cfg:canPrecede ")",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_COMMA_Object_Star,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith "+",
                "-",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2;
         cfg:condition "+",
                "-",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2;
         cfg:mustBeOneSequence  (
         (
            :IRIref )
         (
            :RDFLiteral )
         (
            :NumericLiteral )
         (
            :BooleanLiteral )
         (
            :BlankNode )
         (
            :NIL ) ) .
    
    :GroupGraphPattern     cfg:TEST "{";
         cfg:branch  [
             cfg:branchTail  (
            "{"
            :_TriplesBlock_Opt
            :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star
            "}" );
             cfg:condition "{";
             cfg:sequence  (
            "{"
            :_TriplesBlock_Opt
            :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star
            "}" ) ];
         cfg:canPrecede "}",
                cfg:eof,
                :SolutionModifier,
                :_DOT_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_TriplesBlock_Opt,
                :_UNION_GroupGraphPattern_Star;
         cfg:canStartWith "{";
         cfg:canStartWithLiteral "{";
         cfg:condition "{";
         cfg:mustBeOneSequence  (
         (
            "{"
            :_TriplesBlock_Opt
            :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star
            "}" ) ) .
    
    :GroupOrUnionGraphPattern     cfg:TEST :GroupGraphPattern;
         cfg:branch  [
             cfg:branchTail  (
            :GroupGraphPattern
            :_UNION_GroupGraphPattern_Star );
             cfg:condition "{";
             cfg:sequence  (
            :GroupGraphPattern
            :_UNION_GroupGraphPattern_Star ) ];
         cfg:canPrecede "}",
                :_DOT_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_TriplesBlock_Opt;
         cfg:canStartWith "{";
         cfg:condition "{";
         cfg:mustBeOneSequence  (
         (
            :GroupGraphPattern
            :_UNION_GroupGraphPattern_Star ) ) .
    
    :INTEGER     a cfg:Token;
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                cfg:eof,
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LimitClause_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_OffsetClause_Opt,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith :INTEGER;
         cfg:condition :INTEGER .
    
    :IRI_REF     a cfg:Token;
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :ArgList,
                :GroupGraphPattern,
                :ObjectList,
                :PropertyListNotEmpty,
                :SolutionModifier,
                :WhereClause,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_ArgList_Opt,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_DatasetClause_Star,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_PrefixDecl_Star,
                :_SEMI_Verb_ObjectList_Opt_Star,
                :_SelectQuery_or_ConstructQuery_or_DescribeQuery_or_AskQuery,
                :_VarOrIRIRef_Plus,
                :_WhereClause_Opt;
         cfg:canStartWith :IRI_REF;
         cfg:condition :IRI_REF .
    
    :IRIref     cfg:TEST :IRI_REF,
                :PrefixedName;
         cfg:branch  [
             cfg:branchTail  (
            :IRI_REF );
             cfg:condition :IRI_REF;
             cfg:sequence  (
            :IRI_REF ) ],
                 [
             cfg:branchTail  (
            :PrefixedName );
             cfg:condition :PNAME_LN,
                    :PNAME_NS;
             cfg:sequence  (
            :PrefixedName ) ];
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :ArgList,
                :GroupGraphPattern,
                :ObjectList,
                :PropertyListNotEmpty,
                :SolutionModifier,
                :WhereClause,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_ArgList_Opt,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_DatasetClause_Star,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star,
                :_VarOrIRIRef_Plus,
                :_WhereClause_Opt;
         cfg:canStartWith :IRI_REF,
                :PNAME_LN,
                :PNAME_NS;
         cfg:condition :IRI_REF,
                :PNAME_LN,
                :PNAME_NS;
         cfg:mustBeOneSequence  (
         (
            :IRI_REF )
         (
            :PrefixedName ) ) .
    
    :IRIrefOrFunction     cfg:TEST :IRIref;
         cfg:branch  [
             cfg:branchTail  (
            :IRIref
            :_ArgList_Opt );
             cfg:condition :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS;
             cfg:sequence  (
            :IRIref
            :_ArgList_Opt ) ];
         cfg:canPrecede ")",
                ",",
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_Compare_NumericExpression_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star;
         cfg:canStartWith :IRI_REF,
                :PNAME_LN,
                :PNAME_NS;
         cfg:condition :IRI_REF,
                :PNAME_LN,
                :PNAME_NS;
         cfg:mustBeOneSequence  (
         (
            :IRIref
            :_ArgList_Opt ) ) .
    
    :LANGTAG     a cfg:Token;
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith :LANGTAG;
         cfg:condition :LANGTAG .
    
    :LimitClause     cfg:TEST "LIMIT";
         cfg:branch  [
             cfg:branchTail  (
            "LIMIT"
            :INTEGER );
             cfg:condition "LIMIT";
             cfg:sequence  (
            "LIMIT"
            :INTEGER ) ];
         cfg:canPrecede cfg:eof,
                :_OffsetClause_Opt;
         cfg:canStartWith "LIMIT";
         cfg:canStartWithLiteral "LIMIT";
         cfg:condition "LIMIT";
         cfg:mustBeOneSequence  (
         (
            "LIMIT"
            :INTEGER ) ) .
    
    :LimitOffsetClauses     cfg:TEST :LimitClause,
                :OffsetClause;
         cfg:branch  [
             cfg:branchTail  (
            :LimitClause
            :_OffsetClause_Opt );
             cfg:condition "LIMIT";
             cfg:sequence  (
            :LimitClause
            :_OffsetClause_Opt ) ],
                 [
             cfg:branchTail  (
            :OffsetClause
            :_LimitClause_Opt );
             cfg:condition "OFFSET";
             cfg:sequence  (
            :OffsetClause
            :_LimitClause_Opt ) ];
         cfg:canPrecede cfg:eof;
         cfg:canStartWith "LIMIT",
                "OFFSET";
         cfg:condition "LIMIT",
                "OFFSET";
         cfg:mustBeOneSequence  (
         (
            :LimitClause
            :_OffsetClause_Opt )
         (
            :OffsetClause
            :_LimitClause_Opt ) ) .
    
    :MultiplicativeExpression     cfg:TEST :UnaryExpression;
         cfg:branch  [
             cfg:branchTail  (
            :UnaryExpression
            :_Mul_Div_UnaryExpression_Star );
             cfg:condition "!",
                    "(",
                    "+",
                    "-",
                    "BOUND",
                    "DATATYPE",
                    "LANG",
                    "LANGMATCHES",
                    "REGEX",
                    "STR",
                    "isBLANK",
                    "isIRI",
                    "isLITERAL",
                    "isURI",
                    "sameTerm",
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :UnaryExpression
            :_Mul_Div_UnaryExpression_Star ) ];
         cfg:canPrecede ")",
                ",",
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_Compare_NumericExpression_Opt,
                :_OR_ConditionalAndExpression_Star;
         cfg:canStartWith "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :UnaryExpression
            :_Mul_Div_UnaryExpression_Star ) ) .
    
    :NIL     a cfg:Token;
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                cfg:eof,
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_DOT_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LimitOffsetClauses_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_OrderCondition_Plus,
                :_SEMI_Verb_ObjectList_Opt_Star,
                :_TriplesBlock_Opt;
         cfg:canStartWith :NIL;
         cfg:condition :NIL .
    
    :NamedGraphClause     cfg:TEST "NAMED";
         cfg:branch  [
             cfg:branchTail  (
            "NAMED"
            :SourceSelector );
             cfg:condition "NAMED";
             cfg:sequence  (
            "NAMED"
            :SourceSelector ) ];
         cfg:canPrecede :SolutionModifier,
                :WhereClause,
                :_DatasetClause_Star,
                :_WhereClause_Opt;
         cfg:canStartWith "NAMED";
         cfg:canStartWithLiteral "NAMED";
         cfg:condition "NAMED";
         cfg:mustBeOneSequence  (
         (
            "NAMED"
            :SourceSelector ) ) .
    
    :NumericExpression     cfg:TEST :AdditiveExpression;
         cfg:branch  [
             cfg:branchTail  (
            :AdditiveExpression );
             cfg:condition "!",
                    "(",
                    "+",
                    "-",
                    "BOUND",
                    "DATATYPE",
                    "LANG",
                    "LANGMATCHES",
                    "REGEX",
                    "STR",
                    "isBLANK",
                    "isIRI",
                    "isLITERAL",
                    "isURI",
                    "sameTerm",
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :AdditiveExpression ) ];
         cfg:canPrecede ")",
                ",",
                :_AND_ValueLogical_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_Compare_NumericExpression_Opt,
                :_OR_ConditionalAndExpression_Star;
         cfg:canStartWith "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :AdditiveExpression ) ) .
    
    :NumericLiteral     cfg:TEST :NumericLiteralNegative,
                :NumericLiteralPositive,
                :NumericLiteralUnsigned;
         cfg:branch  [
             cfg:branchTail  (
            :NumericLiteralUnsigned );
             cfg:condition :DECIMAL,
                    :DOUBLE,
                    :INTEGER;
             cfg:sequence  (
            :NumericLiteralUnsigned ) ],
                 [
             cfg:branchTail  (
            :NumericLiteralPositive );
             cfg:condition "+";
             cfg:sequence  (
            :NumericLiteralPositive ) ],
                 [
             cfg:branchTail  (
            :NumericLiteralNegative );
             cfg:condition "-";
             cfg:sequence  (
            :NumericLiteralNegative ) ];
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith "+",
                "-",
                :DECIMAL,
                :DOUBLE,
                :INTEGER;
         cfg:condition "+",
                "-",
                :DECIMAL,
                :DOUBLE,
                :INTEGER;
         cfg:mustBeOneSequence  (
         (
            :NumericLiteralUnsigned )
         (
            :NumericLiteralPositive )
         (
            :NumericLiteralNegative ) ) .
    
    :NumericLiteralNegative     cfg:TEST "-";
         cfg:branch  [
             cfg:branchTail  (
            "-"
            :NumericLiteralUnsigned );
             cfg:condition "-";
             cfg:sequence  (
            "-"
            :NumericLiteralUnsigned ) ];
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith "-";
         cfg:canStartWithLiteral "-";
         cfg:condition "-";
         cfg:mustBeOneSequence  (
         (
            "-"
            :NumericLiteralUnsigned ) ) .
    
    :NumericLiteralPositive     cfg:TEST "+";
         cfg:branch  [
             cfg:branchTail  (
            "+"
            :NumericLiteralUnsigned );
             cfg:condition "+";
             cfg:sequence  (
            "+"
            :NumericLiteralUnsigned ) ];
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith "+";
         cfg:canStartWithLiteral "+";
         cfg:condition "+";
         cfg:mustBeOneSequence  (
         (
            "+"
            :NumericLiteralUnsigned ) ) .
    
    :NumericLiteralUnsigned     cfg:TEST :DECIMAL,
                :DOUBLE,
                :INTEGER;
         cfg:branch  [
             cfg:branchTail  (
            :INTEGER );
             cfg:condition :INTEGER;
             cfg:sequence  (
            :INTEGER ) ],
                 [
             cfg:branchTail  (
            :DECIMAL );
             cfg:condition :DECIMAL;
             cfg:sequence  (
            :DECIMAL ) ],
                 [
             cfg:branchTail  (
            :DOUBLE );
             cfg:condition :DOUBLE;
             cfg:sequence  (
            :DOUBLE ) ];
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith :DECIMAL,
                :DOUBLE,
                :INTEGER;
         cfg:condition :DECIMAL,
                :DOUBLE,
                :INTEGER;
         cfg:mustBeOneSequence  (
         (
            :INTEGER )
         (
            :DECIMAL )
         (
            :DOUBLE ) ) .
    
    :Object     cfg:TEST :GraphNode;
         cfg:branch  [
             cfg:branchTail  (
            :GraphNode );
             cfg:condition "(",
                    "+",
                    "-",
                    "[",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :NIL,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :GraphNode ) ];
         cfg:canPrecede "]",
                "}",
                :_COMMA_Object_Star,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith "(",
                "+",
                "-",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "(",
                "+",
                "-",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :GraphNode ) ) .
    
    :ObjectList     cfg:TEST :Object;
         cfg:branch  [
             cfg:branchTail  (
            :Object
            :_COMMA_Object_Star );
             cfg:condition "(",
                    "+",
                    "-",
                    "[",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :NIL,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :Object
            :_COMMA_Object_Star ) ];
         cfg:canPrecede "]",
                "}",
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith "(",
                "+",
                "-",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "(",
                "+",
                "-",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :Object
            :_COMMA_Object_Star ) ) .
    
    :OffsetClause     cfg:TEST "OFFSET";
         cfg:branch  [
             cfg:branchTail  (
            "OFFSET"
            :INTEGER );
             cfg:condition "OFFSET";
             cfg:sequence  (
            "OFFSET"
            :INTEGER ) ];
         cfg:canPrecede cfg:eof,
                :_LimitClause_Opt;
         cfg:canStartWith "OFFSET";
         cfg:canStartWithLiteral "OFFSET";
         cfg:condition "OFFSET";
         cfg:mustBeOneSequence  (
         (
            "OFFSET"
            :INTEGER ) ) .
    
    :OptionalGraphPattern     cfg:TEST "OPTIONAL";
         cfg:branch  [
             cfg:branchTail  (
            "OPTIONAL"
            :GroupGraphPattern );
             cfg:condition "OPTIONAL";
             cfg:sequence  (
            "OPTIONAL"
            :GroupGraphPattern ) ];
         cfg:canPrecede "}",
                :_DOT_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_TriplesBlock_Opt;
         cfg:canStartWith "OPTIONAL";
         cfg:canStartWithLiteral "OPTIONAL";
         cfg:condition "OPTIONAL";
         cfg:mustBeOneSequence  (
         (
            "OPTIONAL"
            :GroupGraphPattern ) ) .
    
    :OrderClause     cfg:TEST "ORDER";
         cfg:branch  [
             cfg:branchTail  (
            "ORDER"
            "BY"
            :OrderCondition
            :_OrderCondition_Plus );
             cfg:condition "ORDER";
             cfg:sequence  (
            "ORDER"
            "BY"
            :OrderCondition
            :_OrderCondition_Plus ) ];
         cfg:canPrecede cfg:eof,
                :_LimitOffsetClauses_Opt;
         cfg:canStartWith "ORDER";
         cfg:canStartWithLiteral "ORDER";
         cfg:condition "ORDER";
         cfg:mustBeOneSequence  (
         (
            "ORDER"
            "BY"
            :OrderCondition
            :_OrderCondition_Plus ) ) .
    
    :OrderCondition     cfg:TEST :_ASC_Or_DESC_BrackettedExpression,
                :_Constraint_or_Var;
         cfg:branch  [
             cfg:branchTail  (
            :_ASC_Or_DESC_BrackettedExpression );
             cfg:condition "ASC",
                    "DESC";
             cfg:sequence  (
            :_ASC_Or_DESC_BrackettedExpression ) ],
                 [
             cfg:branchTail  (
            :_Constraint_or_Var );
             cfg:condition "(",
                    "BOUND",
                    "DATATYPE",
                    "LANG",
                    "LANGMATCHES",
                    "REGEX",
                    "STR",
                    "isBLANK",
                    "isIRI",
                    "isLITERAL",
                    "isURI",
                    "sameTerm",
                    :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :_Constraint_or_Var ) ];
         cfg:canPrecede cfg:eof,
                :_LimitOffsetClauses_Opt,
                :_OrderCondition_Plus;
         cfg:canStartWith "(",
                "ASC",
                "BOUND",
                "DATATYPE",
                "DESC",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:condition "(",
                "ASC",
                "BOUND",
                "DATATYPE",
                "DESC",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :_ASC_Or_DESC_BrackettedExpression )
         (
            :_Constraint_or_Var ) ) .
    
    :PNAME_LN     a cfg:Token;
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :ArgList,
                :GroupGraphPattern,
                :ObjectList,
                :PropertyListNotEmpty,
                :SolutionModifier,
                :WhereClause,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_ArgList_Opt,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_DatasetClause_Star,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star,
                :_VarOrIRIRef_Plus,
                :_WhereClause_Opt;
         cfg:canStartWith :PNAME_LN;
         cfg:condition :PNAME_LN .
    
    :PNAME_NS     a cfg:Token;
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :ArgList,
                :GroupGraphPattern,
                :IRI_REF,
                :ObjectList,
                :PropertyListNotEmpty,
                :SolutionModifier,
                :WhereClause,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_ArgList_Opt,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_DatasetClause_Star,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star,
                :_VarOrIRIRef_Plus,
                :_WhereClause_Opt;
         cfg:canStartWith :PNAME_NS;
         cfg:condition :PNAME_NS .
    
    :PN_CHARS_U     a cfg:Token .
    
    :PN_LOCAL     a cfg:Token .
    
    :PN_PREFIX     a cfg:Token .
    
    :PrefixDecl     cfg:TEST "PREFIX";
         cfg:branch  [
             cfg:branchTail  (
            "PREFIX"
            :PNAME_NS
            :IRI_REF );
             cfg:condition "PREFIX";
             cfg:sequence  (
            "PREFIX"
            :PNAME_NS
            :IRI_REF ) ];
         cfg:canPrecede :_PrefixDecl_Star,
                :_SelectQuery_or_ConstructQuery_or_DescribeQuery_or_AskQuery;
         cfg:canStartWith "PREFIX";
         cfg:canStartWithLiteral "PREFIX";
         cfg:condition "PREFIX";
         cfg:mustBeOneSequence  (
         (
            "PREFIX"
            :PNAME_NS
            :IRI_REF ) ) .
    
    :PrefixedName     cfg:TEST :PNAME_LN,
                :PNAME_NS;
         cfg:branch  [
             cfg:branchTail  (
            :PNAME_LN );
             cfg:condition :PNAME_LN;
             cfg:sequence  (
            :PNAME_LN ) ],
                 [
             cfg:branchTail  (
            :PNAME_NS );
             cfg:condition :PNAME_NS;
             cfg:sequence  (
            :PNAME_NS ) ];
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :ArgList,
                :GroupGraphPattern,
                :ObjectList,
                :PropertyListNotEmpty,
                :SolutionModifier,
                :WhereClause,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_ArgList_Opt,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_DatasetClause_Star,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star,
                :_VarOrIRIRef_Plus,
                :_WhereClause_Opt;
         cfg:canStartWith :PNAME_LN,
                :PNAME_NS;
         cfg:condition :PNAME_LN,
                :PNAME_NS;
         cfg:mustBeOneSequence  (
         (
            :PNAME_LN )
         (
            :PNAME_NS ) ) .
    
    :PrimaryExpression     cfg:TEST :BooleanLiteral,
                :BrackettedExpression,
                :BuiltInCall,
                :IRIrefOrFunction,
                :NumericLiteral,
                :RDFLiteral,
                :Var;
         cfg:branch  [
             cfg:branchTail  (
            :BrackettedExpression );
             cfg:condition "(";
             cfg:sequence  (
            :BrackettedExpression ) ],
                 [
             cfg:branchTail  (
            :BuiltInCall );
             cfg:condition "BOUND",
                    "DATATYPE",
                    "LANG",
                    "LANGMATCHES",
                    "REGEX",
                    "STR",
                    "isBLANK",
                    "isIRI",
                    "isLITERAL",
                    "isURI",
                    "sameTerm";
             cfg:sequence  (
            :BuiltInCall ) ],
                 [
             cfg:branchTail  (
            :IRIrefOrFunction );
             cfg:condition :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS;
             cfg:sequence  (
            :IRIrefOrFunction ) ],
                 [
             cfg:branchTail  (
            :RDFLiteral );
             cfg:condition :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2;
             cfg:sequence  (
            :RDFLiteral ) ],
                 [
             cfg:branchTail  (
            :NumericLiteral );
             cfg:condition "+",
                    "-",
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER;
             cfg:sequence  (
            :NumericLiteral ) ],
                 [
             cfg:branchTail  (
            :BooleanLiteral );
             cfg:condition :BooleanLiteral;
             cfg:sequence  (
            :BooleanLiteral ) ],
                 [
             cfg:branchTail  (
            :Var );
             cfg:condition :VAR1,
                    :VAR2;
             cfg:sequence  (
            :Var ) ];
         cfg:canPrecede ")",
                ",",
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_Compare_NumericExpression_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star;
         cfg:canStartWith "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :BrackettedExpression )
         (
            :BuiltInCall )
         (
            :IRIrefOrFunction )
         (
            :RDFLiteral )
         (
            :NumericLiteral )
         (
            :BooleanLiteral )
         (
            :Var ) ) .
    
    :Prologue     cfg:TEST :_BaseDecl_Opt;
         cfg:branch  [
             cfg:branchTail (),
                     (
            :_BaseDecl_Opt
            :_PrefixDecl_Star ),
                     (
            :_PrefixDecl_Star );
             cfg:condition "ASK",
                    "BASE",
                    "CONSTRUCT",
                    "DESCRIBE",
                    "PREFIX",
                    "SELECT";
             cfg:sequence  (
            :_BaseDecl_Opt
            :_PrefixDecl_Star ) ];
         cfg:canPrecede :_SelectQuery_or_ConstructQuery_or_DescribeQuery_or_AskQuery;
         cfg:canStartWith "ASK",
                "BASE",
                "CONSTRUCT",
                "DESCRIBE",
                "PREFIX",
                "SELECT";
         cfg:condition "ASK",
                "BASE",
                "CONSTRUCT",
                "DESCRIBE",
                "PREFIX",
                "SELECT";
         cfg:mustBeOneSequence  (
         (
            :_BaseDecl_Opt
            :_PrefixDecl_Star ) ) .
    
    :PropertyList     cfg:TEST :PropertyListNotEmpty;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition ".",
                    "FILTER",
                    "GRAPH",
                    "OPTIONAL",
                    "{",
                    "}";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :PropertyListNotEmpty );
             cfg:condition "a",
                    :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :PropertyListNotEmpty ) ];
         cfg:canPrecede "}",
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star;
         cfg:canStartWith ".",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "a",
                "{",
                "}",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:condition ".",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "a",
                "{",
                "}",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
        ()
         (
            :PropertyListNotEmpty ) ) .
    
    :PropertyListNotEmpty     cfg:TEST :Verb;
         cfg:branch  [
             cfg:branchTail  (
            :Verb
            :ObjectList
            :_SEMI_Verb_ObjectList_Opt_Star );
             cfg:condition "a",
                    :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :Verb
            :ObjectList
            :_SEMI_Verb_ObjectList_Opt_Star ) ];
         cfg:canPrecede "]",
                "}",
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star;
         cfg:canStartWith "a",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:condition "a",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :Verb
            :ObjectList
            :_SEMI_Verb_ObjectList_Opt_Star ) ) .
    
    :Query     cfg:TEST :Prologue;
         cfg:branch  [
             cfg:branchTail  (
            :Prologue
            :_SelectQuery_or_ConstructQuery_or_DescribeQuery_or_AskQuery
            cfg:eof );
             cfg:condition "ASK",
                    "BASE",
                    "CONSTRUCT",
                    "DESCRIBE",
                    "PREFIX",
                    "SELECT";
             cfg:sequence  (
            :Prologue
            :_SelectQuery_or_ConstructQuery_or_DescribeQuery_or_AskQuery
            cfg:eof ) ];
         cfg:canStartWith "ASK",
                "BASE",
                "CONSTRUCT",
                "DESCRIBE",
                "PREFIX",
                "SELECT";
         cfg:condition "ASK",
                "BASE",
                "CONSTRUCT",
                "DESCRIBE",
                "PREFIX",
                "SELECT";
         cfg:mustBeOneSequence  (
         (
            :Prologue
            :_SelectQuery_or_ConstructQuery_or_DescribeQuery_or_AskQuery
            cfg:eof ) ) .
    
    :RDFLiteral     cfg:TEST :String;
         cfg:branch  [
             cfg:branchTail  (
            :String
            :_LANGTAG_IRIref_Opt );
             cfg:condition :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2;
             cfg:sequence  (
            :String
            :_LANGTAG_IRIref_Opt ) ];
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2;
         cfg:condition :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2;
         cfg:mustBeOneSequence  (
         (
            :String
            :_LANGTAG_IRIref_Opt ) ) .
    
    :RegexExpression     cfg:TEST "REGEX";
         cfg:branch  [
             cfg:branchTail  (
            "REGEX"
            "("
            :Expression
            ","
            :Expression
            :_COMMA_Expression_Opt
            ")" );
             cfg:condition "REGEX";
             cfg:sequence  (
            "REGEX"
            "("
            :Expression
            ","
            :Expression
            :_COMMA_Expression_Opt
            ")" ) ];
         cfg:canPrecede ")",
                ",",
                "}",
                cfg:eof,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LimitOffsetClauses_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_OrderCondition_Plus,
                :_TriplesBlock_Opt;
         cfg:canStartWith "REGEX";
         cfg:canStartWithLiteral "REGEX";
         cfg:condition "REGEX";
         cfg:mustBeOneSequence  (
         (
            "REGEX"
            "("
            :Expression
            ","
            :Expression
            :_COMMA_Expression_Opt
            ")" ) ) .
    
    :RelationalExpression     cfg:TEST :NumericExpression;
         cfg:branch  [
             cfg:branchTail  (
            :NumericExpression
            :_Compare_NumericExpression_Opt );
             cfg:condition "!",
                    "(",
                    "+",
                    "-",
                    "BOUND",
                    "DATATYPE",
                    "LANG",
                    "LANGMATCHES",
                    "REGEX",
                    "STR",
                    "isBLANK",
                    "isIRI",
                    "isLITERAL",
                    "isURI",
                    "sameTerm",
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :NumericExpression
            :_Compare_NumericExpression_Opt ) ];
         cfg:canPrecede ")",
                ",",
                :_AND_ValueLogical_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_OR_ConditionalAndExpression_Star;
         cfg:canStartWith "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :NumericExpression
            :_Compare_NumericExpression_Opt ) ) .
    
    :STRING_LITERAL1     a cfg:Token;
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LANGTAG_IRIref_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith :STRING_LITERAL1;
         cfg:condition :STRING_LITERAL1 .
    
    :STRING_LITERAL2     a cfg:Token;
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LANGTAG_IRIref_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith :STRING_LITERAL2;
         cfg:condition :STRING_LITERAL2 .
    
    :STRING_LITERAL_LONG1     a cfg:Token;
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LANGTAG_IRIref_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith :STRING_LITERAL_LONG1;
         cfg:condition :STRING_LITERAL_LONG1 .
    
    :STRING_LITERAL_LONG2     a cfg:Token;
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LANGTAG_IRIref_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith :STRING_LITERAL_LONG2;
         cfg:condition :STRING_LITERAL_LONG2 .
    
    :SelectQuery     cfg:TEST "SELECT";
         cfg:branch  [
             cfg:branchTail  (
            "SELECT"
            :_DISTINCT_OR_REDUCED_Opt
            :_Var_Plus_or_Star
            :_DatasetClause_Star
            :WhereClause
            :SolutionModifier );
             cfg:condition "SELECT";
             cfg:sequence  (
            "SELECT"
            :_DISTINCT_OR_REDUCED_Opt
            :_Var_Plus_or_Star
            :_DatasetClause_Star
            :WhereClause
            :SolutionModifier ) ];
         cfg:canPrecede cfg:eof;
         cfg:canStartWith "SELECT";
         cfg:canStartWithLiteral "SELECT";
         cfg:condition "SELECT";
         cfg:mustBeOneSequence  (
         (
            "SELECT"
            :_DISTINCT_OR_REDUCED_Opt
            :_Var_Plus_or_Star
            :_DatasetClause_Star
            :WhereClause
            :SolutionModifier ) ) .
    
    :SolutionModifier     cfg:TEST :_OrderClause_Opt;
         cfg:branch  [
             cfg:branchTail (),
                     (
            :_LimitOffsetClauses_Opt ),
                     (
            :_OrderClause_Opt
            :_LimitOffsetClauses_Opt );
             cfg:condition "LIMIT",
                    "OFFSET",
                    "ORDER",
                    cfg:eof;
             cfg:sequence  (
            :_OrderClause_Opt
            :_LimitOffsetClauses_Opt ) ];
         cfg:canPrecede cfg:eof;
         cfg:canStartWith "LIMIT",
                "OFFSET",
                "ORDER",
                cfg:eof;
         cfg:condition "LIMIT",
                "OFFSET",
                "ORDER",
                cfg:eof;
         cfg:mustBeOneSequence  (
         (
            :_OrderClause_Opt
            :_LimitOffsetClauses_Opt ) ) .
    
    :SourceSelector     cfg:TEST :IRIref;
         cfg:branch  [
             cfg:branchTail  (
            :IRIref );
             cfg:condition :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS;
             cfg:sequence  (
            :IRIref ) ];
         cfg:canPrecede :SolutionModifier,
                :WhereClause,
                :_DatasetClause_Star,
                :_WhereClause_Opt;
         cfg:canStartWith :IRI_REF,
                :PNAME_LN,
                :PNAME_NS;
         cfg:condition :IRI_REF,
                :PNAME_LN,
                :PNAME_NS;
         cfg:mustBeOneSequence  (
         (
            :IRIref ) ) .
    
    :String     cfg:TEST :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2;
         cfg:branch  [
             cfg:branchTail  (
            :STRING_LITERAL1 );
             cfg:condition :STRING_LITERAL1;
             cfg:sequence  (
            :STRING_LITERAL1 ) ],
                 [
             cfg:branchTail  (
            :STRING_LITERAL2 );
             cfg:condition :STRING_LITERAL2;
             cfg:sequence  (
            :STRING_LITERAL2 ) ],
                 [
             cfg:branchTail  (
            :STRING_LITERAL_LONG1 );
             cfg:condition :STRING_LITERAL_LONG1;
             cfg:sequence  (
            :STRING_LITERAL_LONG1 ) ],
                 [
             cfg:branchTail  (
            :STRING_LITERAL_LONG2 );
             cfg:condition :STRING_LITERAL_LONG2;
             cfg:sequence  (
            :STRING_LITERAL_LONG2 ) ];
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LANGTAG_IRIref_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2;
         cfg:condition :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2;
         cfg:mustBeOneSequence  (
         (
            :STRING_LITERAL1 )
         (
            :STRING_LITERAL2 )
         (
            :STRING_LITERAL_LONG1 )
         (
            :STRING_LITERAL_LONG2 ) ) .
    
    :TriplesBlock     cfg:TEST :TriplesSameSubject;
         cfg:branch  [
             cfg:branchTail  (
            :TriplesSameSubject
            :_Dot_TriplesBlock_Opt_Opt );
             cfg:condition "(",
                    "+",
                    "-",
                    "[",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :NIL,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :TriplesSameSubject
            :_Dot_TriplesBlock_Opt_Opt ) ];
         cfg:canPrecede "}",
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star;
         cfg:canStartWith "(",
                "+",
                "-",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "(",
                "+",
                "-",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :TriplesSameSubject
            :_Dot_TriplesBlock_Opt_Opt ) ) .
    
    :TriplesNode     cfg:TEST :BlankNodePropertyList,
                :Collection;
         cfg:branch  [
             cfg:branchTail  (
            :Collection );
             cfg:condition "(";
             cfg:sequence  (
            :Collection ) ],
                 [
             cfg:branchTail  (
            :BlankNodePropertyList );
             cfg:condition "[";
             cfg:sequence  (
            :BlankNodePropertyList ) ];
         cfg:canPrecede ")",
                "]",
                "}",
                :PropertyList,
                :_COMMA_Object_Star,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith "(",
                "[";
         cfg:condition "(",
                "[";
         cfg:mustBeOneSequence  (
         (
            :Collection )
         (
            :BlankNodePropertyList ) ) .
    
    :TriplesSameSubject     cfg:TEST :TriplesNode,
                :VarOrTerm;
         cfg:branch  [
             cfg:branchTail  (
            :VarOrTerm
            :PropertyListNotEmpty );
             cfg:condition "+",
                    "-",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :NIL,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :VarOrTerm
            :PropertyListNotEmpty ) ],
                 [
             cfg:branchTail  (
            :TriplesNode
            :PropertyList );
             cfg:condition "(",
                    "[";
             cfg:sequence  (
            :TriplesNode
            :PropertyList ) ];
         cfg:canPrecede "}",
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star;
         cfg:canStartWith "(",
                "+",
                "-",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "(",
                "+",
                "-",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :VarOrTerm
            :PropertyListNotEmpty )
         (
            :TriplesNode
            :PropertyList ) ) .
    
    :UnaryExpression     cfg:TEST "!",
                "+",
                "-",
                :PrimaryExpression;
         cfg:branch  [
             cfg:branchTail  (
            "!"
            :PrimaryExpression );
             cfg:condition "!";
             cfg:sequence  (
            "!"
            :PrimaryExpression ) ],
                 [
             cfg:branchTail  (
            "+"
            :PrimaryExpression );
             cfg:condition "+";
             cfg:sequence  (
            "+"
            :PrimaryExpression ) ],
                 [
             cfg:branchTail  (
            "-"
            :PrimaryExpression );
             cfg:condition "-";
             cfg:sequence  (
            "-"
            :PrimaryExpression ) ],
                 [
             cfg:branchTail  (
            :PrimaryExpression );
             cfg:condition "(",
                    "+",
                    "-",
                    "BOUND",
                    "DATATYPE",
                    "LANG",
                    "LANGMATCHES",
                    "REGEX",
                    "STR",
                    "isBLANK",
                    "isIRI",
                    "isLITERAL",
                    "isURI",
                    "sameTerm",
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :PrimaryExpression ) ];
         cfg:canPrecede ")",
                ",",
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_Compare_NumericExpression_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star;
         cfg:canStartWith "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:canStartWithLiteral "!",
                "+",
                "-";
         cfg:condition "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            "!"
            :PrimaryExpression )
         (
            "+"
            :PrimaryExpression )
         (
            "-"
            :PrimaryExpression )
         (
            :PrimaryExpression ) ) .
    
    :VAR1     a cfg:Token;
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                cfg:eof,
                :GroupGraphPattern,
                :ObjectList,
                :PropertyListNotEmpty,
                :SolutionModifier,
                :WhereClause,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_DatasetClause_Star,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LimitOffsetClauses_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_OrderCondition_Plus,
                :_SEMI_Verb_ObjectList_Opt_Star,
                :_VarOrIRIRef_Plus,
                :_Var_Plus,
                :_WhereClause_Opt;
         cfg:canStartWith :VAR1;
         cfg:condition :VAR1 .
    
    :VAR2     a cfg:Token;
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                cfg:eof,
                :GroupGraphPattern,
                :ObjectList,
                :PropertyListNotEmpty,
                :SolutionModifier,
                :WhereClause,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_DatasetClause_Star,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LimitOffsetClauses_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_OrderCondition_Plus,
                :_SEMI_Verb_ObjectList_Opt_Star,
                :_VarOrIRIRef_Plus,
                :_Var_Plus,
                :_WhereClause_Opt;
         cfg:canStartWith :VAR2;
         cfg:condition :VAR2 .
    
    :VARNAME     a cfg:Token .
    
    :ValueLogical     cfg:TEST :RelationalExpression;
         cfg:branch  [
             cfg:branchTail  (
            :RelationalExpression );
             cfg:condition "!",
                    "(",
                    "+",
                    "-",
                    "BOUND",
                    "DATATYPE",
                    "LANG",
                    "LANGMATCHES",
                    "REGEX",
                    "STR",
                    "isBLANK",
                    "isIRI",
                    "isLITERAL",
                    "isURI",
                    "sameTerm",
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :RelationalExpression ) ];
         cfg:canPrecede ")",
                ",",
                :_AND_ValueLogical_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_OR_ConditionalAndExpression_Star;
         cfg:canStartWith "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :RelationalExpression ) ) .
    
    :Var     cfg:TEST :VAR1,
                :VAR2;
         cfg:branch  [
             cfg:branchTail  (
            :VAR1 );
             cfg:condition :VAR1;
             cfg:sequence  (
            :VAR1 ) ],
                 [
             cfg:branchTail  (
            :VAR2 );
             cfg:condition :VAR2;
             cfg:sequence  (
            :VAR2 ) ];
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                cfg:eof,
                :GroupGraphPattern,
                :ObjectList,
                :PropertyListNotEmpty,
                :SolutionModifier,
                :WhereClause,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_DatasetClause_Star,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_LimitOffsetClauses_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_OrderCondition_Plus,
                :_SEMI_Verb_ObjectList_Opt_Star,
                :_VarOrIRIRef_Plus,
                :_Var_Plus,
                :_WhereClause_Opt;
         cfg:canStartWith :VAR1,
                :VAR2;
         cfg:condition :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :VAR1 )
         (
            :VAR2 ) ) .
    
    :VarOrIRIref     cfg:TEST :IRIref,
                :Var;
         cfg:branch  [
             cfg:branchTail  (
            :Var );
             cfg:condition :VAR1,
                    :VAR2;
             cfg:sequence  (
            :Var ) ],
                 [
             cfg:branchTail  (
            :IRIref );
             cfg:condition :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS;
             cfg:sequence  (
            :IRIref ) ];
         cfg:canPrecede :GroupGraphPattern,
                :ObjectList,
                :SolutionModifier,
                :WhereClause,
                :_DatasetClause_Star,
                :_VarOrIRIRef_Plus,
                :_WhereClause_Opt;
         cfg:canStartWith :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:condition :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :Var )
         (
            :IRIref ) ) .
    
    :VarOrTerm     cfg:TEST :GraphTerm,
                :Var;
         cfg:branch  [
             cfg:branchTail  (
            :Var );
             cfg:condition :VAR1,
                    :VAR2;
             cfg:sequence  (
            :Var ) ],
                 [
             cfg:branchTail  (
            :GraphTerm );
             cfg:condition "+",
                    "-",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :NIL,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2;
             cfg:sequence  (
            :GraphTerm ) ];
         cfg:canPrecede ")",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_COMMA_Object_Star,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith "+",
                "-",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "+",
                "-",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :Var )
         (
            :GraphTerm ) ) .
    
    :Verb     cfg:TEST "a",
                :VarOrIRIref;
         cfg:branch  [
             cfg:branchTail  (
            :VarOrIRIref );
             cfg:condition :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :VarOrIRIref ) ],
                 [
             cfg:branchTail  (
            "a" );
             cfg:condition "a";
             cfg:sequence  (
            "a" ) ];
         cfg:canPrecede :ObjectList;
         cfg:canStartWith "a",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:canStartWithLiteral "a";
         cfg:condition "a",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :VarOrIRIref )
         (
            "a" ) ) .
    
    :WS     a cfg:Token .
    
    :WhereClause     cfg:TEST :_WHERE_Opt;
         cfg:branch  [
             cfg:branchTail  (
            :GroupGraphPattern ),
                     (
            :_WHERE_Opt
            :GroupGraphPattern );
             cfg:condition "WHERE",
                    "{";
             cfg:sequence  (
            :_WHERE_Opt
            :GroupGraphPattern ) ];
         cfg:canPrecede cfg:eof,
                :SolutionModifier;
         cfg:canStartWith "WHERE",
                "{";
         cfg:condition "WHERE",
                "{";
         cfg:mustBeOneSequence  (
         (
            :_WHERE_Opt
            :GroupGraphPattern ) ) .
    
    :_AND_ValueLogical     cfg:TEST "&&";
         cfg:branch  [
             cfg:branchTail  (
            "&&"
            :ValueLogical );
             cfg:condition "&&";
             cfg:sequence  (
            "&&"
            :ValueLogical ) ];
         cfg:canPrecede ")",
                ",",
                :_AND_ValueLogical_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_OR_ConditionalAndExpression_Star;
         cfg:canStartWith "&&";
         cfg:canStartWithLiteral "&&";
         cfg:condition "&&";
         cfg:mustBeOneSequence  (
         (
            "&&"
            :ValueLogical ) ) .
    
    :_AND_ValueLogical_Star     cfg:TEST :_AND_ValueLogical;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition ")",
                    ",",
                    "||";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :_AND_ValueLogical
            :_AND_ValueLogical_Star );
             cfg:condition "&&";
             cfg:sequence  (
            :_AND_ValueLogical
            :_AND_ValueLogical_Star ) ];
         cfg:canPrecede ")",
                ",",
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_OR_ConditionalAndExpression_Star;
         cfg:canStartWith "&&",
                ")",
                ",",
                "||";
         cfg:condition "&&",
                ")",
                ",",
                "||";
         cfg:mustBeOneSequence  (
        ()
         (
            :_AND_ValueLogical
            :_AND_ValueLogical_Star ) ) .
    
    :_ASC_Or_DESC     cfg:TEST "ASC",
                "DESC";
         cfg:branch  [
             cfg:branchTail  (
            "ASC" );
             cfg:condition "ASC";
             cfg:sequence  (
            "ASC" ) ],
                 [
             cfg:branchTail  (
            "DESC" );
             cfg:condition "DESC";
             cfg:sequence  (
            "DESC" ) ];
         cfg:canPrecede :BrackettedExpression;
         cfg:canStartWith "ASC",
                "DESC";
         cfg:canStartWithLiteral "ASC",
                "DESC";
         cfg:condition "ASC",
                "DESC";
         cfg:mustBeOneSequence  (
         (
            "ASC" )
         (
            "DESC" ) ) .
    
    :_ASC_Or_DESC_BrackettedExpression     cfg:TEST :_ASC_Or_DESC;
         cfg:branch  [
             cfg:branchTail  (
            :_ASC_Or_DESC
            :BrackettedExpression );
             cfg:condition "ASC",
                    "DESC";
             cfg:sequence  (
            :_ASC_Or_DESC
            :BrackettedExpression ) ];
         cfg:canPrecede cfg:eof,
                :_LimitOffsetClauses_Opt,
                :_OrderCondition_Plus;
         cfg:canStartWith "ASC",
                "DESC";
         cfg:condition "ASC",
                "DESC";
         cfg:mustBeOneSequence  (
         (
            :_ASC_Or_DESC
            :BrackettedExpression ) ) .
    
    :_Add_Sub_MultiplicativeExpression_Star     cfg:TEST "+",
                "-";
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "!=",
                    "&&",
                    ")",
                    ",",
                    "<",
                    "<=",
                    "=",
                    ">=",
                    ">",
                    "||";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            "+"
            :MultiplicativeExpression
            :_Add_Sub_MultiplicativeExpression_Star );
             cfg:condition "+";
             cfg:sequence  (
            "+"
            :MultiplicativeExpression
            :_Add_Sub_MultiplicativeExpression_Star ) ],
                 [
             cfg:branchTail  (
            "-"
            :MultiplicativeExpression
            :_Add_Sub_MultiplicativeExpression_Star );
             cfg:condition "-";
             cfg:sequence  (
            "-"
            :MultiplicativeExpression
            :_Add_Sub_MultiplicativeExpression_Star ) ];
         cfg:canPrecede ")",
                ",",
                :_AND_ValueLogical_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_Compare_NumericExpression_Opt,
                :_OR_ConditionalAndExpression_Star;
         cfg:canStartWith "!=",
                "&&",
                ")",
                "+",
                ",",
                "-",
                "<",
                "<=",
                "=",
                ">=",
                ">",
                "||";
         cfg:canStartWithLiteral "+",
                "-";
         cfg:condition "!=",
                "&&",
                ")",
                "+",
                ",",
                "-",
                "<",
                "<=",
                "=",
                ">=",
                ">",
                "||";
         cfg:mustBeOneSequence  (
        ()
         (
            "+"
            :MultiplicativeExpression
            :_Add_Sub_MultiplicativeExpression_Star )
         (
            "-"
            :MultiplicativeExpression
            :_Add_Sub_MultiplicativeExpression_Star ) ) .
    
    :_ArgList_Opt     cfg:TEST :ArgList;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "!=",
                    "&&",
                    ")",
                    "*",
                    "+",
                    ",",
                    "-",
                    "/",
                    "<",
                    "<=",
                    "=",
                    ">=",
                    ">",
                    "||";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :ArgList );
             cfg:condition "(",
                    :NIL;
             cfg:sequence  (
            :ArgList ) ];
         cfg:canPrecede ")",
                ",",
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_Compare_NumericExpression_Opt,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star;
         cfg:canStartWith "!=",
                "&&",
                "(",
                ")",
                "*",
                "+",
                ",",
                "-",
                "/",
                "<",
                "<=",
                "=",
                ">=",
                ">",
                "||",
                :NIL;
         cfg:condition "!=",
                "&&",
                "(",
                ")",
                "*",
                "+",
                ",",
                "-",
                "/",
                "<",
                "<=",
                "=",
                ">=",
                ">",
                "||",
                :NIL;
         cfg:mustBeOneSequence  (
        ()
         (
            :ArgList ) ) .
    
    :_BaseDecl_Opt     cfg:TEST :BaseDecl;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "ASK",
                    "CONSTRUCT",
                    "DESCRIBE",
                    "PREFIX",
                    "SELECT";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :BaseDecl );
             cfg:condition "BASE";
             cfg:sequence  (
            :BaseDecl ) ];
         cfg:canPrecede :_PrefixDecl_Star,
                :_SelectQuery_or_ConstructQuery_or_DescribeQuery_or_AskQuery;
         cfg:canStartWith "ASK",
                "BASE",
                "CONSTRUCT",
                "DESCRIBE",
                "PREFIX",
                "SELECT";
         cfg:condition "ASK",
                "BASE",
                "CONSTRUCT",
                "DESCRIBE",
                "PREFIX",
                "SELECT";
         cfg:mustBeOneSequence  (
        ()
         (
            :BaseDecl ) ) .
    
    :_COMMA_Expression_Opt     cfg:TEST ",";
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition ")";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            ","
            :Expression );
             cfg:condition ",";
             cfg:sequence  (
            ","
            :Expression ) ];
         cfg:canPrecede ")";
         cfg:canStartWith ")",
                ",";
         cfg:canStartWithLiteral ",";
         cfg:condition ")",
                ",";
         cfg:mustBeOneSequence  (
        ()
         (
            ","
            :Expression ) ) .
    
    :_COMMA_Expression_Star     cfg:TEST ",";
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition ")";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            ","
            :Expression );
             cfg:condition ",";
             cfg:sequence  (
            ","
            :Expression ) ];
         cfg:canPrecede ")";
         cfg:canStartWith ")",
                ",";
         cfg:canStartWithLiteral ",";
         cfg:condition ")",
                ",";
         cfg:mustBeOneSequence  (
        ()
         (
            ","
            :Expression ) ) .
    
    :_COMMA_Object     cfg:TEST ",";
         cfg:branch  [
             cfg:branchTail  (
            ","
            :Object );
             cfg:condition ",";
             cfg:sequence  (
            ","
            :Object ) ];
         cfg:canPrecede "]",
                "}",
                :_COMMA_Object_Star,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith ",";
         cfg:canStartWithLiteral ",";
         cfg:condition ",";
         cfg:mustBeOneSequence  (
         (
            ","
            :Object ) ) .
    
    :_COMMA_Object_Star     cfg:TEST :_COMMA_Object;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition ".",
                    ";",
                    "FILTER",
                    "GRAPH",
                    "OPTIONAL",
                    "]",
                    "{",
                    "}";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :_COMMA_Object
            :_COMMA_Object_Star );
             cfg:condition ",";
             cfg:sequence  (
            :_COMMA_Object
            :_COMMA_Object_Star ) ];
         cfg:canPrecede "]",
                "}",
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith ",",
                ".",
                ";",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "]",
                "{",
                "}";
         cfg:condition ",",
                ".",
                ";",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "]",
                "{",
                "}";
         cfg:mustBeOneSequence  (
        ()
         (
            :_COMMA_Object
            :_COMMA_Object_Star ) ) .
    
    :_Compare_NumericExpression_Opt     cfg:TEST "!=",
                "<",
                "<=",
                "=",
                ">=",
                ">";
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "&&",
                    ")",
                    ",",
                    "||";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            "="
            :NumericExpression );
             cfg:condition "=";
             cfg:sequence  (
            "="
            :NumericExpression ) ],
                 [
             cfg:branchTail  (
            "!="
            :NumericExpression );
             cfg:condition "!=";
             cfg:sequence  (
            "!="
            :NumericExpression ) ],
                 [
             cfg:branchTail  (
            "<"
            :NumericExpression );
             cfg:condition "<";
             cfg:sequence  (
            "<"
            :NumericExpression ) ],
                 [
             cfg:branchTail  (
            ">"
            :NumericExpression );
             cfg:condition ">";
             cfg:sequence  (
            ">"
            :NumericExpression ) ],
                 [
             cfg:branchTail  (
            "<="
            :NumericExpression );
             cfg:condition "<=";
             cfg:sequence  (
            "<="
            :NumericExpression ) ],
                 [
             cfg:branchTail  (
            ">="
            :NumericExpression );
             cfg:condition ">=";
             cfg:sequence  (
            ">="
            :NumericExpression ) ];
         cfg:canPrecede ")",
                ",",
                :_AND_ValueLogical_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_OR_ConditionalAndExpression_Star;
         cfg:canStartWith "!=",
                "&&",
                ")",
                ",",
                "<",
                "<=",
                "=",
                ">=",
                ">",
                "||";
         cfg:canStartWithLiteral "!=",
                "<",
                "<=",
                "=",
                ">=",
                ">";
         cfg:condition "!=",
                "&&",
                ")",
                ",",
                "<",
                "<=",
                "=",
                ">=",
                ">",
                "||";
         cfg:mustBeOneSequence  (
        ()
         (
            "="
            :NumericExpression )
         (
            "!="
            :NumericExpression )
         (
            "<"
            :NumericExpression )
         (
            ">"
            :NumericExpression )
         (
            "<="
            :NumericExpression )
         (
            ">="
            :NumericExpression ) ) .
    
    :_Constraint_or_Var     cfg:TEST :Constraint,
                :Var;
         cfg:branch  [
             cfg:branchTail  (
            :Constraint );
             cfg:condition "(",
                    "BOUND",
                    "DATATYPE",
                    "LANG",
                    "LANGMATCHES",
                    "REGEX",
                    "STR",
                    "isBLANK",
                    "isIRI",
                    "isLITERAL",
                    "isURI",
                    "sameTerm",
                    :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS;
             cfg:sequence  (
            :Constraint ) ],
                 [
             cfg:branchTail  (
            :Var );
             cfg:condition :VAR1,
                    :VAR2;
             cfg:sequence  (
            :Var ) ];
         cfg:canPrecede cfg:eof,
                :_LimitOffsetClauses_Opt,
                :_OrderCondition_Plus;
         cfg:canStartWith "(",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:condition "(",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :Constraint )
         (
            :Var ) ) .
    
    :_ConstructTriples_Opt     cfg:TEST :ConstructTriples;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "}";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :ConstructTriples );
             cfg:condition "(",
                    "+",
                    "-",
                    "[",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :NIL,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :ConstructTriples ) ];
         cfg:canPrecede "}";
         cfg:canStartWith "(",
                "+",
                "-",
                "[",
                "}",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "(",
                "+",
                "-",
                "[",
                "}",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
        ()
         (
            :ConstructTriples ) ) .
    
    :_DISTINCT_OR_REDUCED_Opt     cfg:TEST "DISTINCT",
                "REDUCED";
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "*",
                    :VAR1,
                    :VAR2;
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            "DISTINCT" );
             cfg:condition "DISTINCT";
             cfg:sequence  (
            "DISTINCT" ) ],
                 [
             cfg:branchTail  (
            "REDUCED" );
             cfg:condition "REDUCED";
             cfg:sequence  (
            "REDUCED" ) ];
         cfg:canPrecede :_Var_Plus_or_Star;
         cfg:canStartWith "*",
                "DISTINCT",
                "REDUCED",
                :VAR1,
                :VAR2;
         cfg:canStartWithLiteral "DISTINCT",
                "REDUCED";
         cfg:condition "*",
                "DISTINCT",
                "REDUCED",
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
        ()
         (
            "DISTINCT" )
         (
            "REDUCED" ) ) .
    
    :_DOT_ConstructTriples_Opt_Opt     cfg:TEST ".";
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "}";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            "."
            :_ConstructTriples_Opt );
             cfg:condition ".";
             cfg:sequence  (
            "."
            :_ConstructTriples_Opt ) ];
         cfg:canPrecede "}";
         cfg:canStartWith ".",
                "}";
         cfg:canStartWithLiteral ".";
         cfg:condition ".",
                "}";
         cfg:mustBeOneSequence  (
        ()
         (
            "."
            :_ConstructTriples_Opt ) ) .
    
    :_DOT_Opt     cfg:TEST ".";
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "(",
                    "+",
                    "-",
                    "FILTER",
                    "GRAPH",
                    "OPTIONAL",
                    "[",
                    "{",
                    "}",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :NIL,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            "." );
             cfg:condition ".";
             cfg:sequence  (
            "." ) ];
         cfg:canPrecede "}",
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_TriplesBlock_Opt;
         cfg:canStartWith "(",
                "+",
                "-",
                ".",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "[",
                "{",
                "}",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:canStartWithLiteral ".";
         cfg:condition "(",
                "+",
                "-",
                ".",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "[",
                "{",
                "}",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
        ()
         (
            "." ) ) .
    
    :_DatasetClause_Star     cfg:TEST :DatasetClause;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "LIMIT",
                    "OFFSET",
                    "ORDER",
                    "WHERE",
                    "{",
                    cfg:eof;
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :DatasetClause
            :_DatasetClause_Star );
             cfg:condition "FROM";
             cfg:sequence  (
            :DatasetClause
            :_DatasetClause_Star ) ];
         cfg:canPrecede :SolutionModifier,
                :WhereClause,
                :_WhereClause_Opt;
         cfg:canStartWith "FROM",
                "LIMIT",
                "OFFSET",
                "ORDER",
                "WHERE",
                "{",
                cfg:eof;
         cfg:condition "FROM",
                "LIMIT",
                "OFFSET",
                "ORDER",
                "WHERE",
                "{",
                cfg:eof;
         cfg:mustBeOneSequence  (
        ()
         (
            :DatasetClause
            :_DatasetClause_Star ) ) .
    
    :_DefaultGraphClause_or_NamedGraphClause     cfg:TEST :DefaultGraphClause,
                :NamedGraphClause;
         cfg:branch  [
             cfg:branchTail  (
            :DefaultGraphClause );
             cfg:condition :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS;
             cfg:sequence  (
            :DefaultGraphClause ) ],
                 [
             cfg:branchTail  (
            :NamedGraphClause );
             cfg:condition "NAMED";
             cfg:sequence  (
            :NamedGraphClause ) ];
         cfg:canPrecede :SolutionModifier,
                :WhereClause,
                :_DatasetClause_Star,
                :_WhereClause_Opt;
         cfg:canStartWith "NAMED",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS;
         cfg:condition "NAMED",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS;
         cfg:mustBeOneSequence  (
         (
            :DefaultGraphClause )
         (
            :NamedGraphClause ) ) .
    
    :_Dot_TriplesBlock_Opt_Opt     cfg:TEST ".";
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "FILTER",
                    "GRAPH",
                    "OPTIONAL",
                    "{",
                    "}";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            "."
            :_TriplesBlock_Opt );
             cfg:condition ".";
             cfg:sequence  (
            "."
            :_TriplesBlock_Opt ) ];
         cfg:canPrecede "}",
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star;
         cfg:canStartWith ".",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "{",
                "}";
         cfg:canStartWithLiteral ".";
         cfg:condition ".",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "{",
                "}";
         cfg:mustBeOneSequence  (
        ()
         (
            "."
            :_TriplesBlock_Opt ) ) .
    
    :_Expression_COMMA_Expression_Star     cfg:TEST :Expression;
         cfg:branch  [
             cfg:branchTail  (
            :Expression
            :_COMMA_Expression_Star );
             cfg:condition "!",
                    "(",
                    "+",
                    "-",
                    "BOUND",
                    "DATATYPE",
                    "LANG",
                    "LANGMATCHES",
                    "REGEX",
                    "STR",
                    "isBLANK",
                    "isIRI",
                    "isLITERAL",
                    "isURI",
                    "sameTerm",
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :Expression
            :_COMMA_Expression_Star ) ];
         cfg:canPrecede ")";
         cfg:canStartWith "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "!",
                "(",
                "+",
                "-",
                "BOUND",
                "DATATYPE",
                "LANG",
                "LANGMATCHES",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :Expression
            :_COMMA_Expression_Star ) ) .
    
    :_GraphNode_Opt     cfg:TEST :GraphNode;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition ")";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :GraphNode
            :_GraphNode_Opt );
             cfg:condition "(",
                    "+",
                    "-",
                    "[",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :NIL,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :GraphNode
            :_GraphNode_Opt ) ];
         cfg:canPrecede ")";
         cfg:canStartWith "(",
                ")",
                "+",
                "-",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "(",
                ")",
                "+",
                "-",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
        ()
         (
            :GraphNode
            :_GraphNode_Opt ) ) .
    
    :_GraphNode_Plus     cfg:TEST :GraphNode;
         cfg:branch  [
             cfg:branchTail  (
            :GraphNode
            :_GraphNode_Opt );
             cfg:condition "(",
                    "+",
                    "-",
                    "[",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :NIL,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :GraphNode
            :_GraphNode_Opt ) ];
         cfg:canPrecede ")";
         cfg:canStartWith "(",
                "+",
                "-",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "(",
                "+",
                "-",
                "[",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :GraphNode
            :_GraphNode_Opt ) ) .
    
    :_GraphPatternNotTriples_or_Filter     cfg:TEST :Filter,
                :GraphPatternNotTriples;
         cfg:branch  [
             cfg:branchTail  (
            :GraphPatternNotTriples );
             cfg:condition "GRAPH",
                    "OPTIONAL",
                    "{";
             cfg:sequence  (
            :GraphPatternNotTriples ) ],
                 [
             cfg:branchTail  (
            :Filter );
             cfg:condition "FILTER";
             cfg:sequence  (
            :Filter ) ];
         cfg:canPrecede "}",
                :_DOT_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_TriplesBlock_Opt;
         cfg:canStartWith "FILTER",
                "GRAPH",
                "OPTIONAL",
                "{";
         cfg:condition "FILTER",
                "GRAPH",
                "OPTIONAL",
                "{";
         cfg:mustBeOneSequence  (
         (
            :GraphPatternNotTriples )
         (
            :Filter ) ) .
    
    :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt     cfg:TEST :_GraphPatternNotTriples_or_Filter;
         cfg:branch  [
             cfg:branchTail  (
            :_GraphPatternNotTriples_or_Filter
            :_DOT_Opt
            :_TriplesBlock_Opt );
             cfg:condition "FILTER",
                    "GRAPH",
                    "OPTIONAL",
                    "{";
             cfg:sequence  (
            :_GraphPatternNotTriples_or_Filter
            :_DOT_Opt
            :_TriplesBlock_Opt ) ];
         cfg:canPrecede "}",
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star;
         cfg:canStartWith "FILTER",
                "GRAPH",
                "OPTIONAL",
                "{";
         cfg:condition "FILTER",
                "GRAPH",
                "OPTIONAL",
                "{";
         cfg:mustBeOneSequence  (
         (
            :_GraphPatternNotTriples_or_Filter
            :_DOT_Opt
            :_TriplesBlock_Opt ) ) .
    
    :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star     cfg:TEST :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "}";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt
            :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star );
             cfg:condition "FILTER",
                    "GRAPH",
                    "OPTIONAL",
                    "{";
             cfg:sequence  (
            :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt
            :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star ) ];
         cfg:canPrecede "}";
         cfg:canStartWith "FILTER",
                "GRAPH",
                "OPTIONAL",
                "{",
                "}";
         cfg:condition "FILTER",
                "GRAPH",
                "OPTIONAL",
                "{",
                "}";
         cfg:mustBeOneSequence  (
        ()
         (
            :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt
            :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star ) ) .
    
    :_LANGTAG_IRIref_Opt     cfg:TEST "^^",
                :LANGTAG;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "!=",
                    "&&",
                    "(",
                    ")",
                    "*",
                    "+",
                    ",",
                    "-",
                    ".",
                    "/",
                    ";",
                    "<",
                    "<=",
                    "=",
                    ">=",
                    ">",
                    "FILTER",
                    "GRAPH",
                    "OPTIONAL",
                    "[",
                    "]",
                    "a",
                    "{",
                    "||",
                    "}",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :NIL,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :LANGTAG );
             cfg:condition :LANGTAG;
             cfg:sequence  (
            :LANGTAG ) ],
                 [
             cfg:branchTail  (
            "^^"
            :IRIref );
             cfg:condition "^^";
             cfg:sequence  (
            "^^"
            :IRIref ) ];
         cfg:canPrecede ")",
                ",",
                "]",
                "}",
                :PropertyListNotEmpty,
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_COMMA_Object_Star,
                :_Compare_NumericExpression_Opt,
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphNode_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_Mul_Div_UnaryExpression_Star,
                :_OR_ConditionalAndExpression_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith "!=",
                "&&",
                "(",
                ")",
                "*",
                "+",
                ",",
                "-",
                ".",
                "/",
                ";",
                "<",
                "<=",
                "=",
                ">=",
                ">",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "[",
                "]",
                "^^",
                "a",
                "{",
                "||",
                "}",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :LANGTAG,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:canStartWithLiteral "^^";
         cfg:condition "!=",
                "&&",
                "(",
                ")",
                "*",
                "+",
                ",",
                "-",
                ".",
                "/",
                ";",
                "<",
                "<=",
                "=",
                ">=",
                ">",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "[",
                "]",
                "^^",
                "a",
                "{",
                "||",
                "}",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :LANGTAG,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
        ()
         (
            :LANGTAG )
         (
            "^^"
            :IRIref ) ) .
    
    :_LimitClause_Opt     cfg:TEST :LimitClause;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition cfg:eof;
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :LimitClause );
             cfg:condition "LIMIT";
             cfg:sequence  (
            :LimitClause ) ];
         cfg:canPrecede cfg:eof;
         cfg:canStartWith "LIMIT",
                cfg:eof;
         cfg:condition "LIMIT",
                cfg:eof;
         cfg:mustBeOneSequence  (
        ()
         (
            :LimitClause ) ) .
    
    :_LimitOffsetClauses_Opt     cfg:TEST :LimitOffsetClauses;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition cfg:eof;
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :LimitOffsetClauses );
             cfg:condition "LIMIT",
                    "OFFSET";
             cfg:sequence  (
            :LimitOffsetClauses ) ];
         cfg:canPrecede cfg:eof;
         cfg:canStartWith "LIMIT",
                "OFFSET",
                cfg:eof;
         cfg:condition "LIMIT",
                "OFFSET",
                cfg:eof;
         cfg:mustBeOneSequence  (
        ()
         (
            :LimitOffsetClauses ) ) .
    
    :_Mul_Div_UnaryExpression_Star     cfg:TEST "*",
                "/";
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "!=",
                    "&&",
                    ")",
                    "+",
                    ",",
                    "-",
                    "<",
                    "<=",
                    "=",
                    ">=",
                    ">",
                    "||";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            "*"
            :UnaryExpression
            :_Mul_Div_UnaryExpression_Star );
             cfg:condition "*";
             cfg:sequence  (
            "*"
            :UnaryExpression
            :_Mul_Div_UnaryExpression_Star ) ],
                 [
             cfg:branchTail  (
            "/"
            :UnaryExpression
            :_Mul_Div_UnaryExpression_Star );
             cfg:condition "/";
             cfg:sequence  (
            "/"
            :UnaryExpression
            :_Mul_Div_UnaryExpression_Star ) ];
         cfg:canPrecede ")",
                ",",
                :_AND_ValueLogical_Star,
                :_Add_Sub_MultiplicativeExpression_Star,
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_Compare_NumericExpression_Opt,
                :_OR_ConditionalAndExpression_Star;
         cfg:canStartWith "!=",
                "&&",
                ")",
                "*",
                "+",
                ",",
                "-",
                "/",
                "<",
                "<=",
                "=",
                ">=",
                ">",
                "||";
         cfg:canStartWithLiteral "*",
                "/";
         cfg:condition "!=",
                "&&",
                ")",
                "*",
                "+",
                ",",
                "-",
                "/",
                "<",
                "<=",
                "=",
                ">=",
                ">",
                "||";
         cfg:mustBeOneSequence  (
        ()
         (
            "*"
            :UnaryExpression
            :_Mul_Div_UnaryExpression_Star )
         (
            "/"
            :UnaryExpression
            :_Mul_Div_UnaryExpression_Star ) ) .
    
    :_OR_ConditionalAndExpression     cfg:TEST "||";
         cfg:branch  [
             cfg:branchTail  (
            "||"
            :ConditionalAndExpression );
             cfg:condition "||";
             cfg:sequence  (
            "||"
            :ConditionalAndExpression ) ];
         cfg:canPrecede ")",
                ",",
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star,
                :_OR_ConditionalAndExpression_Star;
         cfg:canStartWith "||";
         cfg:canStartWithLiteral "||";
         cfg:condition "||";
         cfg:mustBeOneSequence  (
         (
            "||"
            :ConditionalAndExpression ) ) .
    
    :_OR_ConditionalAndExpression_Star     cfg:TEST :_OR_ConditionalAndExpression;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition ")",
                    ",";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :_OR_ConditionalAndExpression
            :_OR_ConditionalAndExpression_Star );
             cfg:condition "||";
             cfg:sequence  (
            :_OR_ConditionalAndExpression
            :_OR_ConditionalAndExpression_Star ) ];
         cfg:canPrecede ")",
                ",",
                :_COMMA_Expression_Opt,
                :_COMMA_Expression_Star;
         cfg:canStartWith ")",
                ",",
                "||";
         cfg:condition ")",
                ",",
                "||";
         cfg:mustBeOneSequence  (
        ()
         (
            :_OR_ConditionalAndExpression
            :_OR_ConditionalAndExpression_Star ) ) .
    
    :_OffsetClause_Opt     cfg:TEST :OffsetClause;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition cfg:eof;
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :OffsetClause );
             cfg:condition "OFFSET";
             cfg:sequence  (
            :OffsetClause ) ];
         cfg:canPrecede cfg:eof;
         cfg:canStartWith "OFFSET",
                cfg:eof;
         cfg:condition "OFFSET",
                cfg:eof;
         cfg:mustBeOneSequence  (
        ()
         (
            :OffsetClause ) ) .
    
    :_OrderClause_Opt     cfg:TEST :OrderClause;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "LIMIT",
                    "OFFSET",
                    cfg:eof;
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :OrderClause );
             cfg:condition "ORDER";
             cfg:sequence  (
            :OrderClause ) ];
         cfg:canPrecede cfg:eof,
                :_LimitOffsetClauses_Opt;
         cfg:canStartWith "LIMIT",
                "OFFSET",
                "ORDER",
                cfg:eof;
         cfg:condition "LIMIT",
                "OFFSET",
                "ORDER",
                cfg:eof;
         cfg:mustBeOneSequence  (
        ()
         (
            :OrderClause ) ) .
    
    :_OrderCondition_Plus     cfg:TEST :OrderCondition;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "LIMIT",
                    "OFFSET",
                    cfg:eof;
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :OrderCondition
            :_OrderCondition_Plus );
             cfg:condition "(",
                    "ASC",
                    "BOUND",
                    "DATATYPE",
                    "DESC",
                    "LANG",
                    "LANGMATCHES",
                    "REGEX",
                    "STR",
                    "isBLANK",
                    "isIRI",
                    "isLITERAL",
                    "isURI",
                    "sameTerm",
                    :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :OrderCondition
            :_OrderCondition_Plus ) ];
         cfg:canPrecede cfg:eof,
                :_LimitOffsetClauses_Opt;
         cfg:canStartWith "(",
                "ASC",
                "BOUND",
                "DATATYPE",
                "DESC",
                "LANG",
                "LANGMATCHES",
                "LIMIT",
                "OFFSET",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                cfg:eof,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:condition "(",
                "ASC",
                "BOUND",
                "DATATYPE",
                "DESC",
                "LANG",
                "LANGMATCHES",
                "LIMIT",
                "OFFSET",
                "REGEX",
                "STR",
                "isBLANK",
                "isIRI",
                "isLITERAL",
                "isURI",
                "sameTerm",
                cfg:eof,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
        ()
         (
            :OrderCondition
            :_OrderCondition_Plus ) ) .
    
    :_PrefixDecl_Star     cfg:TEST :PrefixDecl;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "ASK",
                    "CONSTRUCT",
                    "DESCRIBE",
                    "SELECT";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :PrefixDecl
            :_PrefixDecl_Star );
             cfg:condition "PREFIX";
             cfg:sequence  (
            :PrefixDecl
            :_PrefixDecl_Star ) ];
         cfg:canPrecede :_SelectQuery_or_ConstructQuery_or_DescribeQuery_or_AskQuery;
         cfg:canStartWith "ASK",
                "CONSTRUCT",
                "DESCRIBE",
                "PREFIX",
                "SELECT";
         cfg:condition "ASK",
                "CONSTRUCT",
                "DESCRIBE",
                "PREFIX",
                "SELECT";
         cfg:mustBeOneSequence  (
        ()
         (
            :PrefixDecl
            :_PrefixDecl_Star ) ) .
    
    :_SEMI_Verb_ObjectList_Opt     cfg:TEST ";";
         cfg:branch  [
             cfg:branchTail  (
            ";"
            :_Verb_ObjectList_Opt );
             cfg:condition ";";
             cfg:sequence  (
            ";"
            :_Verb_ObjectList_Opt ) ];
         cfg:canPrecede "]",
                "}",
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith ";";
         cfg:canStartWithLiteral ";";
         cfg:condition ";";
         cfg:mustBeOneSequence  (
         (
            ";"
            :_Verb_ObjectList_Opt ) ) .
    
    :_SEMI_Verb_ObjectList_Opt_Star     cfg:TEST :_SEMI_Verb_ObjectList_Opt;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition ".",
                    "FILTER",
                    "GRAPH",
                    "OPTIONAL",
                    "]",
                    "{",
                    "}";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :_SEMI_Verb_ObjectList_Opt
            :_SEMI_Verb_ObjectList_Opt_Star );
             cfg:condition ";";
             cfg:sequence  (
            :_SEMI_Verb_ObjectList_Opt
            :_SEMI_Verb_ObjectList_Opt_Star ) ];
         cfg:canPrecede "]",
                "}",
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star;
         cfg:canStartWith ".",
                ";",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "]",
                "{",
                "}";
         cfg:condition ".",
                ";",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "]",
                "{",
                "}";
         cfg:mustBeOneSequence  (
        ()
         (
            :_SEMI_Verb_ObjectList_Opt
            :_SEMI_Verb_ObjectList_Opt_Star ) ) .
    
    :_SelectQuery_or_ConstructQuery_or_DescribeQuery_or_AskQuery     cfg:TEST :AskQuery,
                :ConstructQuery,
                :DescribeQuery,
                :SelectQuery;
         cfg:branch  [
             cfg:branchTail  (
            :SelectQuery );
             cfg:condition "SELECT";
             cfg:sequence  (
            :SelectQuery ) ],
                 [
             cfg:branchTail  (
            :ConstructQuery );
             cfg:condition "CONSTRUCT";
             cfg:sequence  (
            :ConstructQuery ) ],
                 [
             cfg:branchTail  (
            :DescribeQuery );
             cfg:condition "DESCRIBE";
             cfg:sequence  (
            :DescribeQuery ) ],
                 [
             cfg:branchTail  (
            :AskQuery );
             cfg:condition "ASK";
             cfg:sequence  (
            :AskQuery ) ];
         cfg:canPrecede cfg:eof;
         cfg:canStartWith "ASK",
                "CONSTRUCT",
                "DESCRIBE",
                "SELECT";
         cfg:condition "ASK",
                "CONSTRUCT",
                "DESCRIBE",
                "SELECT";
         cfg:mustBeOneSequence  (
         (
            :SelectQuery )
         (
            :ConstructQuery )
         (
            :DescribeQuery )
         (
            :AskQuery ) ) .
    
    :_TriplesBlock_Opt     cfg:TEST :TriplesBlock;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "FILTER",
                    "GRAPH",
                    "OPTIONAL",
                    "{",
                    "}";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :TriplesBlock );
             cfg:condition "(",
                    "+",
                    "-",
                    "[",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :NIL,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :TriplesBlock ) ];
         cfg:canPrecede "}",
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star;
         cfg:canStartWith "(",
                "+",
                "-",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "[",
                "{",
                "}",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "(",
                "+",
                "-",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "[",
                "{",
                "}",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
        ()
         (
            :TriplesBlock ) ) .
    
    :_UNION_GroupGraphPattern     cfg:TEST "UNION";
         cfg:branch  [
             cfg:branchTail  (
            "UNION"
            :GroupGraphPattern );
             cfg:condition "UNION";
             cfg:sequence  (
            "UNION"
            :GroupGraphPattern ) ];
         cfg:canPrecede "}",
                :_DOT_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_TriplesBlock_Opt,
                :_UNION_GroupGraphPattern_Star;
         cfg:canStartWith "UNION";
         cfg:canStartWithLiteral "UNION";
         cfg:condition "UNION";
         cfg:mustBeOneSequence  (
         (
            "UNION"
            :GroupGraphPattern ) ) .
    
    :_UNION_GroupGraphPattern_Star     cfg:TEST :_UNION_GroupGraphPattern;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "(",
                    "+",
                    "-",
                    ".",
                    "FILTER",
                    "GRAPH",
                    "OPTIONAL",
                    "[",
                    "{",
                    "}",
                    :ANON,
                    :BLANK_NODE_LABEL,
                    :BooleanLiteral,
                    :DECIMAL,
                    :DOUBLE,
                    :INTEGER,
                    :IRI_REF,
                    :NIL,
                    :PNAME_LN,
                    :PNAME_NS,
                    :STRING_LITERAL1,
                    :STRING_LITERAL2,
                    :STRING_LITERAL_LONG1,
                    :STRING_LITERAL_LONG2,
                    :VAR1,
                    :VAR2;
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :_UNION_GroupGraphPattern
            :_UNION_GroupGraphPattern_Star );
             cfg:condition "UNION";
             cfg:sequence  (
            :_UNION_GroupGraphPattern
            :_UNION_GroupGraphPattern_Star ) ];
         cfg:canPrecede "}",
                :_DOT_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_TriplesBlock_Opt;
         cfg:canStartWith "(",
                "+",
                "-",
                ".",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "UNION",
                "[",
                "{",
                "}",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:condition "(",
                "+",
                "-",
                ".",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "UNION",
                "[",
                "{",
                "}",
                :ANON,
                :BLANK_NODE_LABEL,
                :BooleanLiteral,
                :DECIMAL,
                :DOUBLE,
                :INTEGER,
                :IRI_REF,
                :NIL,
                :PNAME_LN,
                :PNAME_NS,
                :STRING_LITERAL1,
                :STRING_LITERAL2,
                :STRING_LITERAL_LONG1,
                :STRING_LITERAL_LONG2,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
        ()
         (
            :_UNION_GroupGraphPattern
            :_UNION_GroupGraphPattern_Star ) ) .
    
    :_VarOrIRIRef_Plus     cfg:TEST :VarOrIRIref;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "FROM",
                    "LIMIT",
                    "OFFSET",
                    "ORDER",
                    "WHERE",
                    "{",
                    cfg:eof;
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :VarOrIRIref
            :_VarOrIRIRef_Plus );
             cfg:condition :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :VarOrIRIref
            :_VarOrIRIRef_Plus ) ];
         cfg:canPrecede :SolutionModifier,
                :WhereClause,
                :_DatasetClause_Star,
                :_WhereClause_Opt;
         cfg:canStartWith "FROM",
                "LIMIT",
                "OFFSET",
                "ORDER",
                "WHERE",
                "{",
                cfg:eof,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:condition "FROM",
                "LIMIT",
                "OFFSET",
                "ORDER",
                "WHERE",
                "{",
                cfg:eof,
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
        ()
         (
            :VarOrIRIref
            :_VarOrIRIRef_Plus ) ) .
    
    :_VarOrIRIref_Plus_or_Star     cfg:TEST "*",
                :VarOrIRIref;
         cfg:branch  [
             cfg:branchTail  (
            :VarOrIRIref
            :_VarOrIRIRef_Plus );
             cfg:condition :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :VarOrIRIref
            :_VarOrIRIRef_Plus ) ],
                 [
             cfg:branchTail  (
            "*" );
             cfg:condition "*";
             cfg:sequence  (
            "*" ) ];
         cfg:canPrecede :SolutionModifier,
                :WhereClause,
                :_DatasetClause_Star,
                :_WhereClause_Opt;
         cfg:canStartWith "*",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:canStartWithLiteral "*";
         cfg:condition "*",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :VarOrIRIref
            :_VarOrIRIRef_Plus )
         (
            "*" ) ) .
    
    :_Var_Plus     cfg:TEST :Var;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "FROM",
                    "LIMIT",
                    "OFFSET",
                    "ORDER",
                    "WHERE",
                    "{",
                    cfg:eof;
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :Var
            :_Var_Plus );
             cfg:condition :VAR1,
                    :VAR2;
             cfg:sequence  (
            :Var
            :_Var_Plus ) ];
         cfg:canPrecede :SolutionModifier,
                :WhereClause,
                :_DatasetClause_Star,
                :_WhereClause_Opt;
         cfg:canStartWith "FROM",
                "LIMIT",
                "OFFSET",
                "ORDER",
                "WHERE",
                "{",
                cfg:eof,
                :VAR1,
                :VAR2;
         cfg:condition "FROM",
                "LIMIT",
                "OFFSET",
                "ORDER",
                "WHERE",
                "{",
                cfg:eof,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
        ()
         (
            :Var
            :_Var_Plus ) ) .
    
    :_Var_Plus_or_Star     cfg:TEST "*",
                :Var;
         cfg:branch  [
             cfg:branchTail  (
            :Var
            :_Var_Plus );
             cfg:condition :VAR1,
                    :VAR2;
             cfg:sequence  (
            :Var
            :_Var_Plus ) ],
                 [
             cfg:branchTail  (
            "*" );
             cfg:condition "*";
             cfg:sequence  (
            "*" ) ];
         cfg:canPrecede :SolutionModifier,
                :WhereClause,
                :_DatasetClause_Star,
                :_WhereClause_Opt;
         cfg:canStartWith "*",
                :VAR1,
                :VAR2;
         cfg:canStartWithLiteral "*";
         cfg:condition "*",
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
         (
            :Var
            :_Var_Plus )
         (
            "*" ) ) .
    
    :_Verb_ObjectList_Opt     cfg:TEST :Verb;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition ".",
                    ";",
                    "FILTER",
                    "GRAPH",
                    "OPTIONAL",
                    "]",
                    "{",
                    "}";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :Verb
            :ObjectList );
             cfg:condition "a",
                    :IRI_REF,
                    :PNAME_LN,
                    :PNAME_NS,
                    :VAR1,
                    :VAR2;
             cfg:sequence  (
            :Verb
            :ObjectList ) ];
         cfg:canPrecede "]",
                "}",
                :_DOT_ConstructTriples_Opt_Opt,
                :_Dot_TriplesBlock_Opt_Opt,
                :_GraphPatternNotTriples_or_Filter_Dot_Opt_TriplesBlock_Opt_Star,
                :_SEMI_Verb_ObjectList_Opt_Star;
         cfg:canStartWith ".",
                ";",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "]",
                "a",
                "{",
                "}",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:condition ".",
                ";",
                "FILTER",
                "GRAPH",
                "OPTIONAL",
                "]",
                "a",
                "{",
                "}",
                :IRI_REF,
                :PNAME_LN,
                :PNAME_NS,
                :VAR1,
                :VAR2;
         cfg:mustBeOneSequence  (
        ()
         (
            :Verb
            :ObjectList ) ) .
    
    :_WHERE_Opt     cfg:TEST "WHERE";
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "{";
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            "WHERE" );
             cfg:condition "WHERE";
             cfg:sequence  (
            "WHERE" ) ];
         cfg:canPrecede :GroupGraphPattern;
         cfg:canStartWith "WHERE",
                "{";
         cfg:canStartWithLiteral "WHERE";
         cfg:condition "WHERE",
                "{";
         cfg:mustBeOneSequence  (
        ()
         (
            "WHERE" ) ) .
    
    :_WhereClause_Opt     cfg:TEST :WhereClause;
         cfg:branch  [
             cfg:branchTail ();
             cfg:condition "LIMIT",
                    "OFFSET",
                    "ORDER",
                    cfg:eof;
             cfg:sequence () ],
                 [
             cfg:branchTail  (
            :WhereClause );
             cfg:condition "WHERE",
                    "{";
             cfg:sequence  (
            :WhereClause ) ];
         cfg:canPrecede :SolutionModifier;
         cfg:canStartWith "LIMIT",
                "OFFSET",
                "ORDER",
                "WHERE",
                "{",
                cfg:eof;
         cfg:condition "LIMIT",
                "OFFSET",
                "ORDER",
                "WHERE",
                "{",
                cfg:eof;
         cfg:mustBeOneSequence  (
        ()
         (
            :WhereClause ) ) .
    
#ENDS
